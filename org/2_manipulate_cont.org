#+TITLE:Manipulate files and data
#+AUTHOR: [yourname] 
#+SUBTITLE:OS Practice CSC 420 Spring 2022
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both :results output
* README
  
  - You can hide/open headers and codeblocks with the <TAB> key

  - You can get this file from tinyurl.com/2-manipulate-files-org

  - You can get the Emacs configuration file for Pi OS from
    tinyurl.com/EmacsLyonPi

  - The solutions and results herein were all obtained on a Pi 3
    running Raspbian GNU/Linux 11 (bullseye).

* Emacs setup

You need two open Emacs buffers, ideally:
1. One buffer shows this file while you work on it.
2. The second buffer shows the file system as you change it.
3. Open a second buffer with ~C-x 5 2~.
4. You can close it again with ~C-x 5 0~ or just delete the window.
5. Try this a couple of times now without losing your mind.
6. Remember: to update the Dired buffer enter ~g~.

* Building a playground

  1) Change to your ~$HOME~ directory
  2) Print your working directory
  3) Make a directory ~playground~
  4) Switch on the verbose option ~-v~
  5) Check that it worked using =ls=, a filter and =grep=

  #+name: mkdir_playground
  #+begin_src bash
    cd $HOME
    pwd
    mkdir --verbose playground
    ls ~ | grep playground
  #+end_src

  #+RESULTS: mkdir_playground
  : /home/marcus
  : mkdir: created directory 'playground'
  : playground

  - [X] Check task group

* Creating directories

  1) Change directory to ~playground~[fn:1] - do this in every code
     block!
  2) Print your working directory
  3) Make two directories ~dir1~ and ~dir2~
  4) Switch on the verbose option ~-v~
  5) Check that it worked using =echo= and the regex ~*[0-9]~

  #+name: make_dirs
  #+begin_src bash
    cd ~/playground
    pwd
    #mkdir --verbose dir1 dir2
    echo "found: " *[0-1]
  #+end_src

  #+RESULTS: make_dirs
  : /home/marcus/playground
  : found:  *[0-1]

  - [X] Check task group

* Copying files

  1) Copy ~/etc/passwd~ into the current working directory (~playground~)
  2) Switch on the verbose option ~-v~
  3) Check that it worked using =echo= and the regex ~pass??~

  #+name: copy_file
  #+begin_src bash
    cd ~/playground
    pwd
    cp -v /etc/passwd .
    echo "found: " pass??
  #+end_src

  #+RESULTS: copy_file
  : /home/marcus/playground
  : '/etc/passwd' -> './passwd'
  : found:  passwd

  - [X] Check task group

* Moving and renaming files

  1) Change the name of ~passwd~ to ~fun~
  2) Switch on the verbose option
  3) Check that it worked with the wildcard ~*fun*~

  #+name: move_file
  #+begin_src bash
    cd ~/playground
    mv -v passwd fun
    echo "found: " *fun*
  #+end_src

  #+RESULTS: move_file
  : renamed 'passwd' -> 'fun'
  : found:  fun

  1) Move the renamed file ~fun~ to directory ~dir1~
  2) Check that it worked with ~ls -l~
  3) Move ~fun~ from ~dir1 to ~dir2~ in one command
  4) Check that it worked with ~ls -l~
  5) Move ~fun~ back to the current working directory
  6) Check that it worked with ~ls -l~

  #+name: move_file_to_dir
  #+begin_src bash
    cd ~/playground
    pwd
    mv -v fun dir1
    mv -v dir1/fun dir2
    mv -v dir2/fun .
    ls -l .
  #+end_src

  #+RESULTS: move_file_to_dir
  : /home/marcus/playground
  : renamed 'fun' -> 'dir1'
  : total 4
  : -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir1

  1) Move file ~fun~ into ~dir1~ again
  2) Move directory ~dir1~ into ~dir2~
  3) Confirm that the file is there with ~ls -l~

  #+name: move_dir_to_dir
  #+begin_src bash
    cd ~/playground
    pwd
    mv -v fun dir1
    mv -v dir1 dir2
    ls dir2/dir1
  #+end_src

  #+RESULTS: move_dir_to_dir
  : /home/marcus/playground
  : renamed 'dir1' -> 'dir2'

  - Note that ~dir1~ was moved into ~dir2~ because it existed
  - If it had not existed, ~dir1~ would have been renamed ~dir2~
  - Put everthing back and confirm at the end with ~ls -l~:
    1. move ~dir1~ back to ~playground~
    2. move ~fun~ from ~dir1~ back to ~playground~
    3. always use the verbose flag ~-v~

  #+name: move_back
  #+begin_src bash
    cd ~/playground
    mv -v dir2/dir1 .
    mv -v dir1/fun .
    ls -l
  #+end_src

  #+RESULTS: move_back
  : total 4
  : -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2

  - [X] Check task group

* Creating hard links

  1) Create a hard link ~fun-hard~ to ~fun~ in ~./~
  2) Create a hard link ~fun-hard~ to ~fun~ in ~dir1~
  3) Create a hard link ~fun-hard~ to ~fun~ in ~dir2~
  4) Switch on the verbose option for ~ln~
  5) Confirm with ~ls -l ./~ and with ~ls -l dir*~

  #+name: hard
  #+begin_src bash
    cd ~/playground
    pwd
    ln -v fun fun-hard
    ln -v fun dir1/fun-hard
    ln -v fun dir2/fun-hard
    ls -l .
    ls -l dir*
  #+end_src

  #+RESULTS: hard
  : /home/marcus/playground
  : total 4
  : -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  : -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2

  #+begin_src bash
    cd ~/playground
    ls -il .
    ls -il dir*
  #+end_src

  #+RESULTS:
  : total 4
  : 4066946 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  : 4066946 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  
  - The number ~4~ in the listing is the number of hard links that
    exist for the file (including the default link)
  - Show that ~fun~ and ~fun-hard~ are identical with ~ls -li~
  - The first column shows the file's ~inode~ (meta data)

  #+name: inode
  #+begin_src bash
    cd ~/playground
    ls -il *
  #+end_src

  #+RESULTS: inode
  : 4066946 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2

  - [X] Check task group

* Creating symbolic links

  1) Create a symlink ~fun-sym~ to ~fun~ in ~./~
  2) Create a symlink ~fun-sym~ to ~fun~ in ~dir1~
  3) Create a symlink ~fun-sym~ to ~fun~ in ~dir2~
  4) Switch on the verbose option for ~ln~
  5) Confirm with ~ls -l ./~ and with ~ls -l dir*~

  #+name: soft
  #+begin_src bash
    cd  ~/playground
    pwd
    # cp -v /etc/passwd ./fun
    ln -sv fun fun-sym
    #mkdir dir1 .
    ln -sv fun dir1/fun-sym
    ln -sv fun dir2/fun-sym
    ls -li dir*
  #+end_src

  #+RESULTS: soft
  : /home/marcus/playground
  : 4066946 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  : 
  : dir1:
  : total 0
  : 4066954 lrwxrwxrwx 1 marcus marcus 3 Feb 20 10:10 fun-sym -> fun

  6) Create a symlink ~dir1-sym~ to ~dir1~ in ~./~

  #+name: soft_dir
  #+begin_src bash
    cd ~/playground
    pwd
    ln -vs dir1 dir1-sym
    ls -l dir1*
  #+end_src

  #+RESULTS: soft_dir
  : /home/marcus/playground
  : 'dir1-sym' -> 'dir1'
  : lrwxrwxrwx 1 marcus marcus    4 Feb 20 10:14 dir1-sym -> dir1
  : 
  : dir1:
  : total 0
  : lrwxrwxrwx 1 marcus marcus 3 Feb 20 10:10 fun-sym -> fun

  7) Check the ~inode~ values in ~playground~.

  #+begin_src bash
    ls -il ~/playground
  #+end_src

  #+RESULTS:
  : total 12
  : 4066953 drwxrwxr-x 2 marcus marcus 4096 Feb 20 10:10 dir1
  : 4067665 lrwxrwxrwx 1 marcus marcus    4 Feb 20 10:14 dir1-sym -> dir1
  : 4066946 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  : 4066949 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:05 fun
  : 4066951 lrwxrwxrwx 1 marcus marcus    3 Feb 20 10:10 fun-sym -> fun

  Test the links by changing to the Dired buffer (~C-x 5 o~)

  - [X] Check task group

* Removing files and directories

  1) Remove the hard link ~fun-hard~ in ~./~ (with verbose option)
  2) Confirm with ~ls -l~~
  3) Check in the Dired buffer

  #+name: rm_hard
  #+begin_src bash
    cd ~/playground
    pwd
    ln -v fun fun-hard
    ls -il .
  #+end_src

  #+RESULTS: rm_hard
  : /home/marcus/playground
  : 'fun-hard' => 'fun'
  : total 16
  : 4066953 drwxrwxr-x 2 marcus marcus 4096 Feb 20 10:10 dir1
  : 4067665 lrwxrwxrwx 1 marcus marcus    4 Feb 20 10:14 dir1-sym -> dir1
  : 4066946 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  : 4066949 -rw-r--r-- 2 marcus marcus 3030 Feb 20 10:05 fun
  : 4066949 -rw-r--r-- 2 marcus marcus 3030 Feb 20 10:05 fun-hard
  : 4066951 lrwxrwxrwx 1 marcus marcus    3 Feb 20 10:10 fun-sym -> fun

  Created a new code block (= new shell session)
  #+begin_src bash
    cd ~/playground
    pwd
    rm -v fun-hard
    ls -il fun*
  #+end_src

  #+RESULTS:
  : /home/marcus/playground
  : removed 'fun-hard'
  : 4066949 -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:05 fun
  : 4066951 lrwxrwxrwx 1 marcus marcus    3 Feb 20 10:10 fun-sym -> fun
  
  4) Create a file ~y~ and put ~y~ into it: ~echo "y" > y~
  5) Remove ~fun~ and switch on verbose option[fn:2]
  6) Confirm with ~ls -l~

  #+name: rm_fun
  #+begin_src bash k:cmdline < y
    cd ~/playground
    pwd
    rm -ifv fun
    ls -l
  #+end_src

  #+RESULTS: rm_fun
  : /home/marcus/playground
  : removed 'fun'
  : total 8
  : drwxrwxr-x 2 marcus marcus 4096 Feb 20 10:10 dir1
  : lrwxrwxrwx 1 marcus marcus    4 Feb 20 10:14 dir1-sym -> dir1
  : -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  : lrwxrwxrwx 1 marcus marcus    3 Feb 20 10:10 fun-sym -> fun

  - [ ] In a shell, check that ~fun-sym~ is broken now with ~cat~. You
    should get this result:
   #+begin_example
   fun-sym: No such file or directory
   #+end_example

  - [ ] Make sure that you understand what "broken symbolic link" in
    this context means, and why ~fun-sym~ is now broken

  - Remove the symbolic links (switch on verbose option)
  - Confirm with ~ls -l~

  #+name: rm_sym
  #+begin_src bash
    cd ~/playground
    pwd
    ls -l
    rm -v dir1-sym fun-sym
    ls -l
  #+end_src

  #+RESULTS: rm_sym
  #+begin_example
  /home/marcus/playground
  total 8
  drwxrwxr-x 2 marcus marcus 4096 Feb 20 10:10 dir1
  lrwxrwxrwx 1 marcus marcus    4 Feb 20 10:14 dir1-sym -> dir1
  -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  lrwxrwxrwx 1 marcus marcus    3 Feb 20 10:10 fun-sym -> fun
  removed 'dir1-sym'
  removed 'fun-sym'
  total 8
  drwxrwxr-x 2 marcus marcus 4096 Feb 20 10:10 dir1
  -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2
  #+end_example

  - Go ~$HOME~ and remove the playground (with verbose option)
  - Check with ~ls -vl~

    #+name: rm_playground
    #+begin_src bash
      cd ~
      pwd
      ls -lv play*
      rm -rf playground
      ls -vl play*
    #+end_src

    #+RESULTS: rm_playground
    : /home/marcus
    : total 8
    : drwxrwxr-x 2 marcus marcus 4096 Feb 20 10:10 dir1
    : -rw-r--r-- 1 marcus marcus 3030 Feb 20 10:01 dir2

  - [X] Check this last task group

  - Save this file with ~C-x C-s~
  - Kill the buffer with ~C-x k~ (confirm)
  
  You may close Emacs!

* Command summary

  * [X] Complete the table!

  | COMMAND | MEANING                   | EXAMPLE            | EXAMPLE          |
  |---------+---------------------------+--------------------+------------------|
  | cd      | change directory          | cd ..              | cd /home/marcus  |
  | pwd     | present working directory | pwd                |                  |
  | mkdir   | make directory            | mkdir              | mkdir -v         |
  | echo    | show text or variables    | echo "hello"       | echo $HOME       |
  | mv      | move file or directory    | mv a b             | mv a ../b        |
  | rm      | remove file               | rm file            | rm -rf dir       |
  | ln      | create soft or hard link  | ln -s file symfile | ln -l file file1 |

* Footnotes

[fn:2]In Org-mode, you need to use the ~:cmdline~ header argument and
redirect the input, in this case from a file ~y~ that only
contains the character ~y~, which I created for this purpose.

[fn:1]If you work with code blocks inside Emacs, you may have to
resort to absolute filenames to make sure that you are where you want
to be.
p
