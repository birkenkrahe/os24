#+TITLE: Notebook - Operating Systems
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 420, Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+PROPERTY: header-args:bash :results output :exports both
#+OPTIONS: toc:nil num:nil ^:nil
* Week 1 - Overview and introduction to OS
#+attr_html: :width 600px
[[../img/cover.png]]

- [X] Course overview - [[https://lyon.instructure.com/courses/2255/assignments/syllabus][syllabus]] and [[https://lyon.instructure.com/courses/2255/pages/course-links][course links]]
- [X] Textbook: The Linux Command Line (2e) - [[https://linuxcommand.org/tlcl.php][free PDF]]
- [X] Installation MSYS2 and CYGWIN on Windows ([[https://chat.google.com/room/AAAABlWSGes/8AnZfK60IZM/8AnZfK60IZM?cls=10][Google Chat]])

** Computer Chronicles - Operating Systems (1984)

- [[https://youtu.be/V5S8kFvXpo4?si=fPAMxylnvxkqHlfC][Source: YouTube]].
- My notes made while watching in class.
- [[https://chat.google.com/room/AAAABlWSGes/VzKc4SfKHUc/VzKc4SfKHUc?cls=10][Post in the OS Google Chat]].

* Week 2 - Setting up Raspberry Pi & First contact
#+ATTR_HTML: :WIDTH 600px:
[[../img/brainOS.png]]

/Alas: my brainOS has swapped memory of the 2022 class to a lost drive./

- [X] Lecture: OS fundamentals (Tuesday) - see also: [[https://colab.research.google.com/drive/1IPjLL83lvJ4PZvfhEQsmBUlbVUAvVdSh?usp=sharing][Ryan's Colab notes]]
- [X] Practice: Get started with Raspberry Pi: connect +and update+ (Thursday)
- [X] DataCamp review/Practice: Manipulating files and directories (Thursday)
- [X] Assignment: Discuss "A practical view of the Linux system" (Thursday)
- [ ] Discussion: Talk about projects with the Raspberry Pi (Tuesday)

** Announcement: UAMS College of Public Health student session

Monday, 29 January 12-12:45 PM via Zoom: http://tinyurl.com/UAMSCPUH
Passcode: 941969
#+ATTR_HTML: :WIDTH 600px:
[[../img/UAMS_student_session.png]]

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 600px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** DataCamp lesson review

Try the command examples in replit.com:
- Login to replit.com and create a bash REPL
- Run the following commands in ~main.sh~ (the bash file):
  #+begin_example sh
  mkdir /home/runner/org
  mkdir /home/runner/org/tmp
  touch /home/runner/org/sample.org
  touch /home/runner/org/.hidden
  touch a.out
  #+end_example

  1. What are the differences between the command line interface (CLI)
     and a graphical user interface (GUI)?
     #+begin_notes
     | CLI                     | GUI                | Commands         |
     |-------------------------+--------------------+------------------|
     | text and ASCII graphics | graphical and text | =cowsay=           |
     | keyboard only           | mouse and keyboard | =localectl status= |
     | flexible                | fixed              | =compgen -c -a=    |
     | established             | version-dependent  |                  |
     #+end_notes

  2. Which command sequence
     - checks your present working directory
     - changes to the ~org~ directory in your home directory
     - checks if you got there
     - lists all Org-mode files?
     #+begin_src sh  :results output
       pwd
       cd ~/org
       pwd
       ls *.org
     #+end_src

  3. Which command sequence
     - copies a file ~a.out~ from ~.~ into your ~org~ directory
     - moves the original file to the ~tmp~ directory in the root directory
     - check if the file is there
     - deletes the file in ~tmp~
     - checks if the file has actually been deleted?
     #+begin_example sh
       cp a.out ~/org
       mv a.out /tmp
       rm /tmp/a.out
       ls /tmp/a.out
     #+end_example

  4. Where does the absolute, and where does the relative path begin?
     #+begin_notes
     1) the absolute path begins at the root (beginning of file tree ~/~)
     2) the relative path begins at the current directory (~.~)
     #+end_notes

  5. How do you go home?
     #+begin_src sh :results output
       pwd
       cd ~  # alternative: `cd $HOME`
       pwd
     #+end_src

  6. What is the home directory of ~root~, the super-user?
     #+begin_notes
     The =$HOME= directory of ~root~ is ~/~
     #+end_notes

  7. Which command sequence  [on replit.com, to to ~~/org/tmp~ first]
     - removes a directory ~tmp~ two levels up from where you are
     - creates a directory ~tmp~ two levels up from where you are
     - lists all the files in that directory
     #+begin_src sh :results output
       rmdir ../../tmp  # directory must be empty
       pwd
       mkdir ../../tmp  # directory must not exist
       ls -a ../../tmp  # -a flag lists all files, even the hidden ones
     #+end_src

     #+RESULTS:
     : /c/Users/birkenkrahe/Documents/GitHub/os24/org
     : .
     : ..

  8. What's UTF-8?
     #+begin_notes
     The dominant character encoding for the World Wide Web capable of
     representing every character needed for writing in the majority
     of the world's languages.

     When you run an Emacs code block for the first time, Emacs will
     ask you which encoding you want to use and suggest UTF-8 to you.
     #+end_notes

** Reading assignment: A Practical View of the Linux System (2019)

- Read "A practical view of the Linux system" (ARM, 2019)
- [[https://www.arm.com/resources/education/books/operating-systems][Free textbook from ARM]] (British producer of the RPi's CPU).
- High level overview and nitty-gritty (C code).
- Read this as a preparation for lecture & discussion.
- Write down any questions you may have.

*** Review questions:
#+ATTR_HTML: :WIDTH 600px:
[[../img/os.png]]

1. Which topics are covered in the chapter?
   #+begin_notes
   - Basic Linux OS concepts: processes, file system, user administration
   - Booting Linux on the Pi: stages, initialization and login
   - Kernel admin/programming: kernel module, device drivers, tasks
   #+end_notes

2. What's a thread?
   #+begin_notes
   Threads are multiple concurrent tasks executing within a single
   process. Threads of a process share its resources (memory,
   priorities etc.).
   #+end_notes

3. What does "Everything is a file" really mean?
   #+begin_notes
   - A file to the user: contiguous data set.
   - A file to Linux: a place to read data from or write data to
   - Alternatives: "Everything is a stream of bytes/file descriptor."
   #+end_notes

4. What is POSIX?
   #+begin_notes
   POSIX = Portable Operating System Interface standard - defines the
   API, command line shells and utilities to ensure cross-OS
   portability.
   #+end_notes

5. Bonus questions: what is the ~.elf~ format? What is a ~Makefile~?
   #+begin_notes
   ELF = Executable and linkable standard format for executable files,
   object code, shared libraries, and core dumps in Unix-like systems.
   #+end_notes

*** Pretty useless summary (ChatGPT/AiPDF)
The document titled "[[https://github.com/birkenkrahe/os24/blob/main/pdf/The_Linux_System.pdf][The Linux System]]" provides a comprehensive view
of the Linux operating system, particularly focusing on its use with
the Raspberry Pi. The key points covered in the document include:

- *Linux System Overview*: It starts by introducing essential operating
  system concepts like processes, users, files, permissions, and
  credentials. It discusses the chain of events in booting Linux on
  the Raspberry Pi, creating Linux kernel modules, and building a
  custom Linux kernel. The chapter serves as a roadmap for the rest of
  the book, offering background knowledge rather than a how-to guide.

- *Operating System Hierarchy*: It details the Linux kernel's role and
  the interfacing between the kernel and user space applications. The
  document discusses processes, user space and kernel space, and the
  'everything is a file' concept in Linux.

- *Users and Permissions*: The system's multi-user nature, process
  creation, and user permissions are explored. It discusses the root
  user, the concept of credentials, and privileges in Linux.

- *Booting Linux on Arm-Based Systems*: The document provides an
  in-depth look at the boot process of Linux on the Raspberry Pi,
  covering each stage in detail. It explains the roles of various
  components like =bootcode.bin=, =start.elf=, =kernel.img=, and the
  =initramfs= in the boot process.

- *System Initialization* and *Login Process*: The role of the =systemd=
  process in system initialization, the process of user login via
  terminal or graphical interface, and the involvement of =getty= and
  login programs are outlined.

- *Kernel Administration* and *Programming*: It covers topics like
  loadable kernel modules, device drivers, and the anatomy of a Linux
  kernel module. The document also guides on building custom kernel
  modules and the complete kernel.

- *Administrator and Programmer View*: The document then shifts focus to
  how these concepts are relevant to system administrators and
  programmers, covering process management, scheduling, memory
  management, concurrency, parallelism, I/O, and persistent storage.

- *Exercises and Questions*: The chapter concludes with exercises and
  questions on installing Raspbian, setting up =ssh=, writing kernel
  modules, understanding the Linux boot process, and system
  administration tasks.

  This summary provides an overview of the topics covered in the
  document, offering insights into the practical aspects of Linux
  system administration and programming, particularly in relation to
  the Raspberry Pi. For more detailed information, you can refer to
  the document: [[[https://myaidrive.com/792tCDLz4VFrqZy2/The_Linux_Sy.pdf][The Linux System]]].

** Practice: first use of the shell on Raspberry Pi

- When you are on the X11 graphical desktop and you start the
  terminal, you're actually using a terminal emulator.

- Open the terminal outside of Emacs now, and try a few
  commands:
  1) find out who you are:
     #+begin_src sh
       whoami
     #+end_src
  2) find out where your computer is on the network:
     #+begin_src sh
       hostname -I
     #+end_src
  3) show the date and time:
     #+begin_src sh
       date
     #+end_src
  4) show available disk space in a format suitable for
     humans (only show the first five lines):
     #+begin_src sh
       df -H | head -n 5
     #+end_src
  5) show the amount of free memory:
     #+begin_src sh
       free
     #+end_src
  6) see all running process (refreshed every 5 seconds):
     #+begin_src sh
       top
     #+end_src

* Week 3 - Shells & Using Emacs & Manipulating files
#+attr_html: :width 600px
[[../img/week3.png]]

/Image: OS fundamentals (penguins can't spell)./

Tuesday:
- [ ] *Lecture*: OS fundamentals (continued)
- [X] *Practice*: Update/upgrade PiOS / Emacs shells / LitProg

Thursday:
- [X] *Practice*: Manipulating files (~mkdir~, ~mv~, ~rm~, ~ln~) -
  [[http://tinyurl.com/2-manipulate-org][tinyurl.com/2-manipulate-files-org]]
- [ ] *Discussion*: Projects? Projects!
- [ ] *Review*: Manipulating data (~cat~ ~less~ ~head~ ~ls~ ~man~ ~cut~ ~grep~ ~paste~)

Next:
- DataCamp: I relaxed the deadline for the next lesson (Feb 8).
- We're going to try and MASTER switching back and forth between Windows & Pi
- Remember to update your Pi:
  #+begin_example sh
  $ sudo apt update -y
  $ sudo apt full-upgrade
  #+end_example
- We might try and upgrade the OS on the Pi itself next week.
- I'll also give you a lecture on the Raspberry Pi.

** [Desperate] Lab setup
#+ATTR_HTML: :WIDTH 600px:
[[../img/labsetup.png]]

- Let's understand the KVM switch setup (Ryan/Jacob?).
- Make sure you return the workspace to a functional state.
- You can take your Pi home if you like between sessions.
- If you break it, you buy it ($100).
#+ATTR_HTML: :WIDTH 600px:
[[../img/kvm.png]]

** Unplugging the Pi (almost every session)

1. Shut down the Pi with ~sudo shutdown now~ on the console
2. Unplug the power mini-USB
3. Unplug the other cables
4. Press the button on the KVM switch to return to Windows
5. Sign out of Windows if necessary

** Lecture: OS fundamentals

- [[file:1_fundamentals.org]] - Part 1: From kernel to timesharing.

** Practice: Update/upgrade PiOS / Emacs shells / LitProg

My pi@10.12.1.106

- Fire up your Pi.
- At the prompt, enter ~startx~ to start the X11 server.
- On the desktop, click on the raspberry logo and open ~Emacs (GUI)~.
- Download the ~.emacs~ configuration file:
  1) Open the Emacs browser with ~M-x eww~
  2) Enter the URL ~tinyurl.com/EmacsLyonPi~
  3) Write the file to ~~/.emacs~ with ~C-x C-w~
  4) Execute (~M-x eval-buffer~) to run configuration
  5) Now change your theme if you like (~M-x custom-themes~)
  6) Download the instructions from ~tinyurl.com/TermEmulator~
  7) Write the file to ~/1_fundamentals_practice.org~
  8) View your home directory with ~C-x d~ and enter ~s~ to see both files.
  9) Quit Emacs with ~C-x C-c~
  10) Fire Emacs back up again from the shell with ~emacs &~
  11) Work through the instructions.
  12) When finished, close down your computer with ~sudo shutdown now~

** DataCamp lesson review: manipulating files (practice)

Theme: Manipulating data on the command line (shell, terminal, CLI):
- [[http://tinyurl.com/2-manipulate-practice-org][Practice file]] and [[https://github.com/birkenkrahe/os24/blob/main/org/2_manipulate_practice_solution.org][solution file]]

** FYI - Installing Raspberry Pi OS for Pi400 ([[https://chat.google.com/room/AAAABlWSGes/DBIhqcpWdEU/DBIhqcpWdEU?cls=10][chat]])

Sources:
- [[https://www.raspberrypi.com/documentation/computers/getting-started.html][Getting started: detailed instructions]]
- [[https://www.raspberrypi.com/software/operating-systems/][Download area (RPi Imager - installer)]]
- [[https://www.raspberrypi.com/software/raspberry-pi-desktop/#:~:text=Debian%20with%20Raspberry%20Pi%20Desktop,PC%20or%20Apple%20Mac%20computer.][Raspberry Pi Desktop (for any old computer)]]
- [[https://youtu.be/eZ74x6dVYes?si=vLjK8nndJS2uS6bf][Raspberry Pi Explained in 100 seconds]]

What to do:
1. Get an SD card reader ([[https://www.amazon.com/UGREEN-Reader-Memory-Windows-Simultaneously/dp/B01EFPX9XA/ref=asc_df_B01EFPX9XA/?tag=hyprod-20&linkCode=df0&hvadid=309777534894&hvpos=&hvnetw=g&hvrand=14922228828382288851&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9025961&hvtargid=pla-438771094500&psc=1&mcid=3346d44aed8837e692060fcb6e3c7209&tag=&ref=&adgrpid=58425267301&hvpone=&hvptwo=&hvadid=309777534894&hvpos=&hvnetw=g&hvrand=14922228828382288851&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9025961&hvtargid=pla-438771094500&gclid=CjwKCAiAkp6tBhB5EiwANTCx1MXXejCwHTaI0GldFt8JUvq7DYoQPfNZgsoibyMvW6i26B62w9UBUhoC2twQAvD_BwE][I use this one]] - $12).
2. Get an SDHC card ([[https://www.amazon.com/Samsung-Class-Adapter-MB-MC32GA-AM/dp/B0749KG1JK/ref=sr_1_2?crid=MY5LUD60LHJI&keywords=samsung+32gb+sd+card+micro&qid=1705552023&sprefix=samsung+32gb+s%2Caps%2C112&sr=8-2][I use SanDisk Ultra Class 10 32GB]] - $12).
3. Mount SD card reader with microSD to your PC (Windows/MacOS = plugin).
4. Run RPi installer program on your PC.
5. Follow the instructions (pick Pi model/OS type/storage device).
6. Insert SD card in Rasperry Pi - boot and configure.

* Week 4 - File system & Raspberry Pi
#+ATTR_HTML: :WIDTH 600px:
[[../img/pifigure.png]]

- [X] Review: Test 1 (average result 84.17% = B+)
  #+begin_src R :results output :session *R* :exports both :noweb yes
    mean(c(75.83,92.5,82.5,85,85,92.5,92.5,68.33,88.33,88.33,90,90,87.5,68.33,75.83))
  #+end_src

- [X] Projects discussion (sprint review: week 6 - 19 Feb)
- [X] OS fundamentals lecture & YouTube lectures
- [X] Upgrade Raspberry Pi OS

Next week:
- [ ] Finish "Manipulating files" [[http://tinyurl.com/2-manipulate-practice-org][Practice file]] (with [[https://github.com/birkenkrahe/os24/blob/main/org/2_manipulate_practice_solution.org][solution]]).
- [ ] Review and revisit "manipulating data" and "combining tools".

** Opportunity: working with a [social] entrepreneurship project
#+ATTR_HTML: :WIDTH 600px:
[[../img/social.webp]]

If you're interested in making the world a better place not just in a
general, but in a specific way, starting right here in Batesville, and
earn extra credit, you can use your project in connection with the
"social entrepreneurship club" (SEC) - to reduce poverty, ignorance,
and even hunger. For Operating Systems, this will take a little more
thought than e.g. for databases.

One example might be the creation of a maker space for kids, or of a
series of realistic Raspberry Pi projects. To brainstorm ideas and see
what is already cooking, get together with Dr. Peter Staples and me,
and/or join the Google Space for SEC.

Dr. Staples will also offer a project management course this summer.

** Project challenge - (virtually) impossible


- 420 level course = independence and inspiration!
- This is a great opportunity for AI to shine!
- We'll only have 3 sprints, after 6, 11 and 15 weeks:
  1. Proposal in week 6.
  2. Results in week 11.
  3. Final presentation in week 16.

#+begin_quote
Prompt: "Give me 15 project ideas for a course on Operating Systems,
especially Linux. A project is completed by an individual student. The
project runs for 15 weeks. The student must produce a proposal
including methodology and references."
#+end_quote

[[https://chat.openai.com/share/c278de95-6b4a-4588-acb3-146689054b4d][Here's the answer.]] Including a sample breakdown of one project, and
the prerequisites:

1) Student with knowledge and experience
   - Computer Architecture
   - C programming (especially pointers, memory management)
   - Command line, bash programming, GCC, GNU make
2) Beginner
   - Set up a Linux environment (virtual machine) for experimentation
   - Write a simple kernel module
   - Compile the module
   - Learn to load and unload the kernel module
   - View kernel log for module output.

How such a kernel module could look like:
#+begin_example C
#include <linux/module.h>   // Needed for all modules
#include <linux/kernel.h>   // Needed for KERN_INFO

// Module Initialization function
static int __init simple_module_init(void) {
    printk(KERN_INFO "SimpleModule: Module loaded!\n");
    return 0; // Return 0 means module successfully loaded
}

// Module Cleanup function
static void __exit simple_module_exit(void) {
    printk(KERN_INFO "SimpleModule: Module unloaded!\n");
}

// Register module entry and exit points
module_init(simple_module_init);
module_exit(simple_module_exit);

// Module information
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("A Simple Linux Kernel Module");
MODULE_VERSION("0.1");
#+end_example

Simpler: bash- and shell-related projects.
** Project challenge - (totally) possible

Re-create a Raspberry Pi projects. The choice is yours!
- [[https://www.tomshardware.com/features/best-raspberry-pi-projects][Best Raspberry Pi projects January 2024]]
- [[https://pimylifeup.com/category/projects/][List of 160+ projects]]
- [[https://www.hackster.io/raspberry-pi/projects][4343 Raspberry Pi Projects]]

To do this, and to do stuff at home, you can take your Pi home if you
like and if you promise to look after it. If you destroy it, you'll
have to replace it - the Pi400 only costs $84 right now [[https://www.amazon.com/Raspberry-400-Computer-Kit-RPI400-US/dp/B08MYVQW1S/ref=sr_1_2?crid=7VCXPFUD7I0R&keywords=pi400&qid=1705606222&s=books&sprefix=pi400%2Cstripbooks%2C122&sr=1-2&ufe=app_do%3Aamzn1.fos.006c50ae-5d4c-4777-9bc0-4513d670b6bc][at
Amazon]]. (You might want to get your own anyway!)

You may have to purchase some equipment (I have a limited private
supply only). But it shouldn't break the bank especially since you
didn't have to buy a textbook (e.g. Intel NeuralStick 60$, LCD HAT
$20, )

Featured sample project for beginners:
- [[https://www.hackster.io/sridhar-rajagopal/international-space-station-tracker-6afdca][International Space Station tracker]] (2020) + Python

** Project challenge - conceptual projects

Any topic related to operating systems, even if we talked about it in
class: deepen it and make it interactive (for others) if you can. You
could take a chapter from any of the textbooks mentioned in the
syllabus, research and present it.

A project could also be the use of Linux in an area of your interest,
for example finance, video games, scientific supercomputing, particle
experiments, cosmology, or sports analytics.

You can also pick Windows or MacOS as a topic, and contrast it with
Linux. We've talked about this in class, but only anecdotally and
sporadically.

It would be good If you can link this project with the project in
another class you take with me this term - that way you can go deeper
and spend more time on one topic. Talk to me if you wish to do this.

** Upgrading Raspberry Pi OS
#+ATTR_HTML: :WIDTH 600px:
[[../img/retro_pi.png]]

Script: [[file:pi_install.org][Installing PiOS on Raspberry Pi 3-4]]

* Week 5 - DataCamp review / OS basics review / shell commands
#+attr_html: :width 600px
[[../img/shell-tools.png]]

** Lecture: OS fundamentals (Feb 6)

- [[file:1_fundamentals.org]] - From the OS kernel to timesharing.
- OS videos (Mitch Davis based on Silberschatz et al. 10e):
  1. [[https://www.youtube.com/watch?v=zJTqTs7Ujr8&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq&index=1&t=20s&pp=iAQB][Introducing the OS (10 min)]]
  2. [[https://www.youtube.com/watch?v=Ku1gdK7ybAk&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq&index=2&t=536s&pp=iAQB][OS terminology (17 min)]]
  3. [[https://www.youtube.com/watch?v=09pJYDQ92FQ&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq&index=3&t=222s&pp=iAQB][Multitasking Kernel App modes (13 min)]]

** 10 review questions OS videos

1) Where's the "firmware" and what does it do?
   #+begin_notes
   - What: Manufacturer-specific software that provides low-level
     control for a device's specific hardware.
   - Where: embedded in the non-volatile ROM (Read-Only-Memory)
   #+end_notes
2) What's the short definition of an OS?
   #+begin_notes
   An OS is a resource allocator - for processing time (CPU) and
   memory (RAM).
   #+end_notes
3) Is the OS "fair"?
   #+begin_notes
   The OS strives to schedule processes to get equal share of the CPU
   but in the interest of system integrity, process and user priority,
   it must routinely play favorites.
   #+end_notes
4) Does the OS respond to every user request?
   #+begin_notes
   No though every request will get a hearing as long as it reaches
   the shell. While the OS aims to manage resources efficiently and
   provide application program services, requests may be denied due
   to:
   - insufficient permissions
   - resource limitations
   - system policies
   - system request errors
   #+end_notes
5) How is a device controlled by the OS?
   #+begin_notes
   1. Device driver loads registers in the device controller.
   2. Device controller decides which action to take, like 'read
      character' from keyboard.
   3. Controller transfers data from device to its local buffer.
   4. When transfer is complete, device driver is informed via an
      *interrupt* signal from the controller.
   #+end_notes
6) What are "system interrupts"?
   #+begin_notes
   An interrupt is a signal to the CPU from hardware or software
   indicating an event that needs the CPUs immediate attention. All
   current operations are halted, the current state is saved, and
   execution is transferred to the interrupt handler to address the
   event. An example: printer job is finished.
   #+end_notes
7) Which program runs at all times (while the computer is on)?
   #+begin_notes
   The OS kernel, or the managing brain of the CPU operation.
   #+end_notes
8) Which daemon runs at all times (while the computer is on)?
   #+begin_notes
   The system daemon program or =systemd=.
   #+end_notes
9) What is "multiprogramming"?
   #+begin_notes
   Aka "Batch system" operation mode:
   - Jobs (code + data) are organized to keep the CPU always busy.
   - One job is selected and run via job scheduling.
   - Jobs may have to wait (e.g. for I/O) and the OS switches to another.
   #+end_notes
10) What is "timesharing"?
    #+begin_notes
    Aka "multitasking":
    - CPU switches jobs so fast that users get the illusion of
      interactive computing
    - Timesharing gives rise to the different OS management tasks:
      1. Memory management (e.g. assign and use local variables)
      2. Process management (e.g. using the CPU)
      3. Scheduling management (e.g. switching processes)
      4. Device management (e.g. find and use printer)
      5. File management (e.g. find and use files)
    #+end_notes

** OS fundamentals demo - four easy pieces

- Pseudo-kernel in Python ~kernel.py~
- Interrupt log on Linux ~/proc/interrupts~
- Multiprogramming: ~R CMD BATCH~
- Timesharing: ~top~

** DataCamp `shell` review - Where are we? What do you know?
*** You know how to create, change, copy, remove, link files and directories:

| COMMAND | MEANING                   | EXAMPLE            | EXAMPLE          |
|---------+---------------------------+--------------------+------------------|
| cd      | change directory          | cd ..              | cd /home/marcus  |
| pwd     | present working directory | pwd                |                  |
| mkdir   | make directory            | mkdir              | mkdir -v         |
| echo    | show text or variables    | echo "hello"       | echo $HOME       |
| mv      | move file or directory    | mv a b             | mv a ../b        |
| cp      | copy file or directory    | cp a b             | cp a ../b        |
| rm      | remove file               | rm file            | rm -rf dir       |
| ln      | create soft or hard link  | ln -s file symfile | ln -l file file1 |

*** You know how to view data sets whole, and in parts by rows and columns:

| COMMAND | MEANING                | EXAMPLE       | COMMENT                |
|---------+------------------------+---------------+------------------------|
| cat     | view                   | cat file      |                        |
| less    | view page-wise         | less file     | q to quit              |
| head    | view top rows/bytes    | head -n 5     | top five rows          |
| tail    | view bottom rows/bytes | tail -c 3     | bottom 3 bytes         |
| ls      | list dir files         | ls -RaF .     | list pwd recursively   |
|         |                        |               | w/hidden files & flag  |
| cut     | view column values     | cut -f 2 file | extract 2nd column     |
| history | command history        | !100 or !head | repeat command no. 100 |
|         |                        |               | or last run of `head`  |
| grep    | match lines by pattern | grep -chilvn  |                        |

- Cutting columns in the presence of quotation marks: what if we want
  to extract only the last names, or only the age?
  #+begin_src bash
    # view the file
    cat ../data/everyone.csv; echo -----

    # cut doesn't cut it in this case
    cut -f 2 -d , ../data/everyone.csv; echo -----

    # ignore the header, extract 2nd column, lose trailing quotation marks
    tail -n +2 ../data/everyone.csv | awk -F, '{print $2}'| tr -d '"'; echo -----

    # same thing for the 3rd column (no need to remove quotation marks)
    tail -n +2 ../data/everyone.csv | awk -F, '{print $3}'
  #+end_src

  #+RESULTS:
  #+begin_example
  Name,Age
  "Johel,Ranjit",28
  "Sharma,Rupinder",26
  -----
  Age
  Ranjit"
  Rupinder"
  -----
  Ranjit
  Rupinder
  -----
  28
  26
  #+end_example

*** You know how to combine commands with pipes and simple redirection

| COMMAND | MEANING                   | EXAMPLE   | COMMENT               |
|---------+---------------------------+-----------+-----------------------|
| sort    | sort input                | sort -nr  | numerical / reverse   |
| uniq    | remove duplicate lines    | uniq -ci  | count/ignore case     |
| wc      | word/character/line count | wc        | counts all w/c/l      |
| >       | redirect stdin            | ls > file | store listing in file |

- What does this command do?
  #+begin_src bash :results output
    ls | sort -r | wc -l
  #+end_src

  #+RESULTS:
  : 12

  #+begin_quote
  Answer:
  1. lists all files by name only
  2. sorts them in reverse alphabetical order
  3. counts the number of lines = number of files in pwd

  Notice that the effects of the ~sort~ program do not show at all -
  it's superfluous (though it's not in the way).
  #+end_quote


** TODO Finish manipulating files and directories practice

- open [[http://tinyurl.com/2-os-practice-org][tinyurl.com/2-os-practice-org]] (partially filled)
- save file as ~2-practice.org~
- run all code blocks with ~M-x org-babel-execute-buffer~
- start at *"moving and renaming files"*
- when finished, [[https://lyon.instructure.com/courses/2255/assignments/24640][upload file to Canvas]]

** Due next week: your project proposal ([[https://lyon.instructure.com/courses/2255/assignments/24827][Canvas]]/[[https://drive.google.com/drive/folders/1glJ_hZ_NybaQIvkPHysiG-FeZ1wSyz6n?usp=drive_link][GDrive]])

* Week 6 - Exploring the system / Sprint review: proposal
#+attr_html: :width 300px:
[[../img/couple1.png]]  [[../img/couple2.png]]

/Images: a couple, separated by Linux, somewhere in Batesville./

** DONE Feedback: project proposal (via email)
** DONE Finish "manipulating files" (symbolic links/removing directories)
* Week 7 - Manipulating files and directories / working with commands
#+attr_html: :width 600px:
[[../img/week_7.webp]]

** DONE Pop quiz 1 - manipulating files and data - 60 min

Time ca. 1 hour
- [[https://github.com/birkenkrahe/os24/blob/main/pdf/popquiz1.pdf][The quiz (PDF)]]
- [[https://github.com/birkenkrahe/os24/blob/main/pdf/popquiz1_solutions.pdf][The solutions (PDF)]]


** Mark the date: Lyon College Career Expo (free headshots!?)
#+attr_html: :width 600px:
[[../img/headshots.webp]]

1) Register at the entrance (QR code) to get bonus points

2) Remember to dress the part and bring your 1-page resume

3) Pick up contacts, follow up on them and let me know about them

** Test 3 coming up: manipulating files and data!
#+attr_html: :width 600px:
[[../img/test_1.png]]

#+attr_html: :width 600px:
[[../img/test_2.png]]

- Good: improved average
- Good: used more time on average


** Project update (pair exercise) - 45 min
#+attr_html: :width 600px:
[[../img/project.webp]]

- If you were asked to improve on your (perhaps non-existing)
  proposal, do so within a week from today (Thursday, March 7), and
  *send me a chat message* to let me know what you did.

- Now, *get together in pairs* and *explain your project* and your
  *progress* (or lack thereof) to your partner (10 min)

- Your partner will then introduce your project to everyone else (35 min):
  1) Your current project status
  2) Your final deliverable
  3) Your motivation for this project
  4) Your main challenges ahead
  5) Your next steps (first results due week 11/end of March)

* Week 8 - Working with commands
#+attr_html: :width 600px:
[[../img/week_8.png]]
/Image: daemon OS programs waiting for something to do./

** Test 3 available until March 10 / grading

- 30 questions, 1 hour time to complete: Take your time!
- Covers class practice and DataCamp chapters
- Grading: complete by tomorrow (incl. proposal, DataCamp, Bonus)


** Working with shell commands - 60-75 min (code along)

Emacs special: add ~<b~ as ~src bash~ to ~org-structure-template-alist~:
1. ~C-h v org-structure-template-alist~
2. At the bottom, click on =Customize=
3. At the bottom, click on =Ins=
4. Enter the =Key= ~b~
5. Enter the =Template= ~src bash~
6. At the top, click on =Apply and Save=
7. Test it in an Org-mode file by entering ~<b TAB~
8. In the code block, run a =bash= command, like ~ls -alF~

Download the practice file: [[http://tinyurl.com/3-shell-org][tinyurl.com/3-shell-org]]

Objectives:
- Understand the Linux file system
- Combining viewing commands with =|= pipes and simple =>= redirection
- Identifying commands with =type=
- Getting and reading documentation with =info= and =man=
- Creating commands with =alias=


** Review: The Linux File System and Shell Commands

1) Which information is not kept as a file in Linux?
   #+begin_quote
   - In-memory data (variables, runtime data structures)
   - CPU states (registers)
   - Transient network data (has to be cached to be in a file)
   - Environment variables (kept in shell memory)
   - Kernel data outside of ~/proc~ and ~/sys~ like interrupts
   #+end_quote

2) How are "special files" identified, and what are examples?
   #+begin_quote
   - Directories identified by `d` at the start of `ls -l` output
   - Character device files identified by `c` at the start of `ls -l` output
   - Symbolic (soft) links identified by `l` at the start of `ls -l` output
   - Block device files identified by `b` at the start of `ls -l` output
   - Named pipes identified by `p` at the start of `ls -l` output
   - Sockets identified by `s` at the start of `ls -l` output
   #+end_quote
   #+begin_src bash
     ls -l /tmp/ | grep 'srwx'   # a socket for Zoom
     ls -l /bin                  # a symbolic link to /usr/bin
     ls -l /dev/tty              # a character device file to the keyboard
   #+end_src

   #+RESULTS:
   : srwxrwxr-x 1 marcus marcus        0 Mar  6 13:56 qtsingleapp-zoom-3e8
   : lrwxrwxrwx 1 root root 7 Jan 30 23:01 /bin -> usr/bin
   : crw-rw-rw- 1 root tty 5, 0 Mar  6 22:27 /dev/tty

3) What types of shell commands are there?
   #+begin_quote
   Built-ins (=cd=), binaries (=gcc=), shell functions, and aliases
   #+end_quote
   #+begin_src bash
     ## bash(1) function definition
     hello() { echo "hello world"; }
     declare -F  # or use `typeset -F`
     declare -f  # or use `typeset -f`
   #+end_src

   #+RESULTS:
   : declare -f hello
   : hello ()
   : {
   :     echo "hello world"
   : }

4) Which ways do you know to identify a command?
   #+begin_src bash
     type -a ls
     type cd
     which gcc
   #+end_src

   #+RESULTS:
   : ls is /usr/bin/ls
   : ls is /bin/ls
   : cd is a shell builtin
   : /usr/bin/gcc

5) Which ways do you know to get help about a command?
   #+begin_src bash
     help cd | head -n 2
     help type | head -n 2
   #+end_src

   #+RESULTS:
   : cd: cd [-L|[-P [-e]] [-@]] [dir]
   :     Change the shell working directory.
   : type: type [-afptP] name [name ...]
   :     Display information about command type.

   #+begin_src bash
     gcc --help | head -n 4
   #+end_src

   #+RESULTS:
   : Usage: gcc [options] file...
   : Options:
   :   -pass-exit-codes         Exit with highest error code from a phase.
   :   --help                   Display this information.

6) For those with a photographic memory or fast fingers: name one directory!
   #+begin_quote
   | DIRECTORY      | CONTENT                                           |
   |----------------+---------------------------------------------------|
   | ~/~              | Root directory where everything begins            |
   | ~/bin~           | Executable binaries for the OS to boot and run    |
   | ~/boot~          | Linux kernel, initial RAM disk image to boot      |
   | ~/dev~           | List for kernel with all known devices            |
   | ~/etc~           | System configuration files (e.g. ~/etc/passwd~)     |
   | ~/home~          | Directory for user directories (e.g. ~/home/pi~)    |
   | ~/lib~           | Shared library files (like Windows DLLs)          |
   | ~/lost+found~    | Panic room for each formatted disk partition      |
   | ~/mnt~           | Mount points for manually mounted removable media |
   | ~/opt~           | Optional commercial software (e.g. browser)       |
   | ~/proc~          | Virtual FS for the kernel (e.g. ~/proc/cpuinfo~)    |
   | ~/root~          | ~$HOME~ directory of the ~root~ super-user            |
   | ~/tmp~           | Holding bay for temp files, emptied at reboot     |
   | ~/usr/share/doc~ | Man pages and other package documentation         |
   | ~/var/log~       | Records of system activity (e.g. ~/var/log/syslog~) |
   #+end_quote

* Week 9 - Redirection and Expansion
#+attr_html: :width 600px:
[[../img/week_9.png]]

This is what ChatGPT/DALL-E3 came up with for 'redirection'

** DataCamp

New DataCamp lessons (deadlines March 29, April 5): =bash(1)= scripting,
starting with simple scripts from your command line skills.

** Test 3 results

Results from test 3 (manipulating files / DataCamp lessons):
#+attr_html: :width 600px:
[[../img/test_3.png]]

** Project

- 2nd sprint review (March 29): literature (source) review ([[https://lyon.instructure.com/courses/2255/assignments/26168][Canvas]])

- Check in: project confidence (0 to 100)? If < 50% talk to me.

** Review: working with shell commands
1) What's the difference between =type=, =which=, and =help=?
   #+begin_quote
   | COMMAND | MEANING                       | EXAMPLE  |
   |---------+-------------------------------+----------|
   | type    | how a cmd name is interpreted | type ls  |
   | which   | which cmd is executed         | which ls |
   | help    | help for shell built-ins      | help cd  |
   #+end_quote
2) What's the difference between =man=, =apropos, =info= and =whatis=?
   #+begin_quote
   | COMMAND | MEANING                       | EXAMPLE             |
   |---------+-------------------------------+---------------------|
   | man     | full manual page              | man ls              |
   | apropos | searches matching manuals     | apropos --exact apt |
   | info    | info entry (hyperlinked)      | info ls             |
   | whatis  | one-line manual extract       | whatis ls           |
   #+end_quote
3) How can you see all aliases?
   #+begin_example bash
     alias
   #+end_example
4) Is an =alias= permanent?
   #+begin_quote
   - An =alias= is only permanent for the current shell session
   - To recreate it at the start of a session, add it to ~~/.bashrc~
   - To remove it during a shell session, use =unalias= on its name
   #+end_quote
5) Where is the documentation (like manual pages) stored?
   #+begin_quote
   In ~/usr/share~.
   #+end_quote
   #+begin_src bash
     manpath  # path for man pages
     man -w ls # location of man page for `ls`
   #+end_src

   #+RESULTS:
   : /home/marcus/.local/share/man:/usr/local/man:/usr/local/share/man:/usr/share/man
   : /usr/share/man/man1/ls.1.gz
6) What kinds of command line tools are there?
   #+begin_quote
   #+attr_html: :width 600px:
   [[../img/command_line_tools.png]]
   #+end_quote

** Redirection

- Lecture: [[https://github.com/birkenkrahe/os24/blob/main/org/4_redirection.org][4_redirection.org]] in GitHub
- Codealong: [[http://tinyurl.com/4-redirection-org][tinyurl.com/4-redirection-org]]

** Review - redirection

1. Where are =stdin=, =stdout= and =stderr= in the file tree and what kind
   of files are they?
   #+begin_quote
   They are in =/dev=. They are symbolic links to the processor in =/proc=.
   #+end_quote
2. How can you redirect the standard output of a command to a file,
   and what kind of file is created by default using this redirection?
   #+begin_quote
   You can redirect the standard output using the ~>~ operator, as in ~ls
   -l /usr/bin > txt~. By default, an ASCII text file is created.
   #+end_quote
   #+begin_src bash
     ls -l /usr/bin > list; file list
   #+end_src

   #+RESULTS:
   : list: ASCII text
3. What is the effect of executing ~ls -l /bin/usr > file~ when the
   ~/bin/usr~ directory does not exist, and how does redirecting
   standard error differ from redirecting standard output?
   #+begin_quote
   When the directory does not exist, the standard error message is
   not redirected to a file but displayed on the screen instead. To
   redirect =stderr=, use ~2>~ operator, as in ~ls -l /bin/usr 2> file~
   #+end_quote
   #+begin_src bash
     ls -l /bin/usr 2> file
     cat file
   #+end_src

   #+RESULTS:
   : ls: cannot access '/bin/usr': No such file or directory
4. Describe the process and outcome of appending both standard output
   and standard error to the same file.
   #+begin_quote
   To append both stdout and stderr to the same file, use the ~&>~
   operator or append the operator ~2>1&~.
   #+end_quote
   #+begin_src bash
     rm err err2
     ls -l /bin/usr &> err
     cat err
     echo
     ls -l /bin/usr > err2 2>&1
     cat err2
   #+end_src

   #+RESULTS:
   : ls: cannot access '/bin/usr': No such file or directory
   :
   : ls: cannot access '/bin/usr': No such file or directory
5. How can you create a new empty file or discard command output using
   redirection?
   #+begin_quote
   You can create an empty file by using ~> filename~ with no source
   command, and you can discard any command output by redirecting it
   to ~/dev/null~, as in ~command > /dev/null~ for stdout or ~command 2>
   /dev/null~ for stderr.
   #+end_quote

** Expansion

- Lecture: [[https://github.com/birkenkrahe/os24/blob/main/org/5_expansion.org][5_expansion.org in GitHub]]
- Codealong: [[https://tinyurl.com/5-expansion-org][tinyurl.ncom/5-expansion-org]]

* Week 10 - Popquiz 2 / Expansion / Permissions
#+attr_html: :width 600px:
[[../img/mainframe.jpg]]

- [X] Popquiz 2 (by hand)

- [X] Expansion on the shell (continued)

- [X] 2nd sprint review - questions? Deadline Sun Apr 7 (*extended*)
  1. What did you already do?
  2. What are you going to do?
  3. What is your confidence level regarding this activity?

- [X] File permissions

* Week 11 - Permissions
#+attr_html: :width 600px:
[[../img/he_is_risen.png]]

/Image: Surprise moment in the coding room, Easter 1964./

- [X] *Bonus assignment*: test your understanding ([[https://lyon.instructure.com/courses/2255/assignments/26487][Canvas]]) by May 7
- [X] *Test 4* (working with shell and redirection) 30 pts, Sun Apr 7
- [X] *Permissions* - download the update: [[http://tinyurl.com/permissions-org][tinyurl.com/permissions-org]]

* Week 12 - Changing identities and first bash script
#+attr_html: :width 600px:
[[../img/week_12.png]]

- Wednesday 4pm (Derby 016): candidate teaching demonstration on
  "Exploring the Sorting Algorithms in Computer Science".

** Review test 4

- Good results!
  #+attr_html: :width 600px:
  [[../img/test_4.png]]

- A couple of questions were difficult:

  1) Which command shows all locations of =grep=? Both =which= and =type=
     work in this case though =which= strictly speaking shows files
     which would be executed in the current environment, while =type -a=
     displays all locations of an executable (check ~help type~ and ~man
     which~).
     #+begin_src bash
       which -a grep
       type -a grep
     #+end_src
     I'll give you an extra point if you got this wrong (check and
     contact me).

  2) The =grep= command can search through output from other commands:
     #+begin_src bash
       ls | grep 'notebook'  # output from ls via filter
       grep 'notebook' < ls.text  # output from file
       grep 'notebook' ls.text # file as a direct argument
     #+end_src

     #+RESULTS:
     : notebook.org
     : notebook.org

** Review DataCamp lesson "From command-line to bash script"

1) Why =bash(1)=?
   #+begin_quote
   - All cloud providers have command-line interfaces (CLI) to their
     services.
   - Makes life easier. Example: yesterday I needed to convert many
     .docx and .xlsx files into PDF so that I could move them to my
     remarkable. I installed =pandoc=, a general markup converter
     program, and ran a short script (after converting it with =chmod
     755=):
   #+end_quote
   #+begin_example sh
   #!/usr/bin/bash
   for file in *.xlsx; do
     libreoffice --headless --convert-to pdf "$file"
   done

   for file in *.docx; do
     pandoc "$file" -o "${file%.docx}.pdf"
   done
   #+end_example

2) What's the difference between =grep= and =egrep?=
   #+begin_quote
   =grep= is a pattern macthing command. =egrep= uses /extended/ pattern
   matching - fewer characters to be escaped.
   #+end_quote

3) What does =[ ]= do in pattern matching?
   #+begin_quote
   Contains a matching set:
   #+end_quote
   #+begin_src bash
     echo -e "apple\nbanana\ncarrot" > fruits.txt
     cat fruits.txt | grep '[pc]'
   #+end_src

   #+RESULTS:
   : apple
   : carrot

4) Why do you need to =sort= before selecting unique lines with =uniq=?
   #+begin_quote
   =uniq= only filters adjacent lines (i.e. won't find duplicates unless
   they are in subsequent lines).
   #+end_quote
   #+begin_src bash
     for i in {1..20}; do echo -e "apple\nbanana\ncarrot"; done >> new_fruits.txt
     cat new_fruits.txt | sort | uniq -c | head -n 3
     cat new_fruits.txt | uniq -c | head -n 3
   #+end_src

   #+RESULTS:
   :     240 apple
   :     240 banana
   :     240 carrot
   :       1 apple
   :       1 banana
   :       1 carrot

   #+begin_src bash
     head -n 6 new_fruits.txt  # print first six rows of original file
     cat new_fruits.txt | sort | head -n 241 | tail -n 1 # print last row
     # of sorted file
   #+end_src

   #+RESULTS:
   : apple
   : banana
   : carrot
   : apple
   : banana
   : carrot
   : banana

5) Which =grep= flag allows you to search for one term /OR/ another term?
   #+begin_example bash
    cat two_cities.txt | grep -E 'Sydney Carton|Charles Darnay' | wc -l
   #+end_example

6) How does a bash script begin?
   #+begin_quote
   With a 'shebang' =#!/usr/bin/bash= (no need for .sh)
   #+end_quote
   But how to find out where =bash(1)= is?
   #+begin_src bash
     which bash
     type -a bash
   #+end_src

   #+RESULTS:
   : /usr/bin/bash
   : bash is /usr/bin/bash
   : bash is /bin/bash

7) How would you write a 'hello world' bash script? How can it be
   executed?
   #+begin_src bash :tangle src/hw.sh
     #!/usr/bin/bash
     echo "hello world"
   #+end_src
   #+begin_example
   $ bash hw.sh
   $ chmod 755; ./hw.sh
   #+end_example

8) Can you explain every part of the following command?
   #+begin_example bash
     cat soccer_scores.csv | cut -d "," -f 2 | tail -n +2 | sort | uniq -c | sort -r
   #+end_example
   Output:
   #+begin_example
     17 Dunav
     15 Etar
     13 Arda
      9 Botev
      8 Cherno
      8 Beroe
      4 Levski
      1 Lokomotiv
   #+end_example
   Answer:
   #+begin_quote
   1) With =cat=, send CSV file to =stdout=; pipe =stdout= to
   2) with =cut=, extract column 2 from file where columns are delimited
      by comma; pipe =stdout= to
   3) with =tail=, start output with line 2; pipe =stdout= to
   4) =sort= in ascending order so that identical records/rows are
      adjacent; pipe =stdout= to
   5) use =uniq= to filter out distinct rows and prefix by number of
      occurrences; pipe =stdout= to
   6) =sort= to reverse display and show items in descending order.
   #+end_quote

9) What does =sed= do?
   #+begin_src bash
     # `sed` finds and replaces string patterns in the stdin stream
     echo "hello world hello world" > hw.txt
     cat hw.txt
     sed 's/world/hello/g' hw.txt # replace `world` by `hello` everywhere
     sed 's/world/hello/' hw.txt # replace `world` by `hello` first occurrence
   #+end_src

   #+RESULTS:
   : hello world hello world
   : hello hello hello hello
   : hello hello hello world

   #+begin_quote
   In the =sed= argument, =s/= stands for 'string' substitution, and =/g=
   stands for global substitution, i.e. all occurrences.
   #+end_quote

10) What is ARGV?
    #+begin_quote
    ARGV is the vector of all arguments fed to a bash script.
    #+end_quote
    #+begin_src bash :tangle args.sh :results silent
      #!/usr/bin/bash
      echo $1
      echo $2
      echo $@
      echo "There are " $# "arguments"
    #+end_src

11) What kind of completions is this: ~cat hire_data/* | grep "$1" > "$1".csv~
    #+begin_quote
    - The file completion with *
    - Environment variable substitution, which is preserved by "".
    #+end_quote

** Short review and practice exercises for permissions

1) What does the command =chmod= do in the context of Linux file
   permissions?
   #+begin_quote
   - Change a file's mode, e.g. ~chmod 755~
   #+end_quote
   #+begin_src bash
     rm foo
     > foo
     ls -l foo  # what is my =umask= default?
     chmod 644 foo
     ls -l foo
   #+end_src

   #+RESULTS:
   : -rw-rw-r-- 1 marcus marcus 0 Apr 11 09:37 foo
   : -rw-r--r-- 1 marcus marcus 0 Apr 11 09:37 foo

2) When attempting to access ~/etc/shadow~ as a regular user, why might
   you encounter a "Permission denied" error?
   #+begin_quote
   - You don't have read permission for the file. How can you find
     out why, and who does have these permissions?
   #+end_quote
   #+begin_src bash
     ls -l /etc/shadow
     cat /etc/group | grep marcus
   #+end_src

   #+RESULTS:
   : -rw-r----- 1 root shadow 1575 Feb  9 16:21 /etc/shadow
   : adm:x:4:syslog,marcus
   : cdrom:x:24:marcus
   : sudo:x:27:marcus
   : dip:x:30:marcus
   : plugdev:x:46:marcus
   : lpadmin:x:115:marcus
   : marcus:x:1000:
   : sambashare:x:136:marcus

3) Which command would you use to find out the current user's
   identity, including their groups?
   #+begin_quote
   - id for =uid= and =gid= (how would you print the output line by line?)
   #+end_quote
   #+begin_src bash
     id | tr ',' '\n'
   #+end_src

   #+RESULTS:
   : uid=1000(marcus) gid=1000(marcus) groups=1000(marcus)
   : 4(adm)
   : 24(cdrom)
   : 27(sudo)
   : 30(dip)
   : 46(plugdev)
   : 115(lpadmin)
   : 136(sambashare)

   #+begin_src bash
     id | tr ',' '\n' | tr ' ' '\n'
   #+end_src

   #+RESULTS:
   #+begin_example
   uid=1000(marcus)
   gid=1000(marcus)
   groups=1000(marcus)
   4(adm)
   24(cdrom)
   27(sudo)
   30(dip)
   46(plugdev)
   115(lpadmin)
   136(sambashare)
   #+end_example

4) What is the primary purpose of the =setuid= bit in Linux file
   permissions?
   #+begin_quote
   - It allows a program to run with the permissions of the file's owner
   #+end_quote
5) In the context of Linux permissions, what does the =su -= command achieve?
   #+begin_quote
   - Equivalent to =su -l=, login as superuser (~root~).
   - What if you enter this command in an Emacs code block?
   #+end_quote
6) Why might an administrator use the =chown= command?
   #+begin_quote
   - To change the owner and/or group ownership of a file
   - For example, how to change the group of ~foo~ to ~cdrom~?
   #+end_quote
   #+begin_src bash
     ls -l foo
     chown :cdrom foo  # command + attributes + target
     ls -l foo
   #+end_src

   #+RESULTS:
   : -rw-r--r-- 1 marcus marcus 0 Apr 11 09:37 foo
   : -rw-r--r-- 1 marcus cdrom 0 Apr 11 09:37 foo

7) What is the result of executing =chmod go== on a directory that you own?
   #+begin_quote
   - Makes the directory unreadable and unwriteable to anyone else but you.
   - What if you want members of your group to still be able to view
     files in the directory?
   #+end_quote
   #+begin_src bash
     #rmdir foodir
     mkdir -v foodir
     ls -ld foodir    # default is 775
     chmod go= foodir # change to 700
     ls -ld foodir
     chmod 740 foodir # change to rwxr-----
     ls -ld foodir
   #+end_src

   #+RESULTS:
   : mkdir: created directory 'foodir'
   : drwxrwxr-x 2 marcus marcus 4096 Apr 11 09:47 foodir
   : drwx------ 2 marcus marcus 4096 Apr 11 09:47 foodir
   : drwxr----- 2 marcus marcus 4096 Apr 11 09:47 foodir

8) What does the sticky bit do when set on a directory?
   #+begin_quote
   - Prevents users from deleting or renaming files in that directory
     unless they are the owner of the file, the directory, or the
     superuser
   - Used to control file manipulation in shared directories like ~/tmp~
   #+end_quote
9) Where do you see the =setuid=, the =setgid= and the sticky bit?
   #+begin_quote
   - In the file permissions as =S=, =s= and =t=
   #+end_quote
   #+begin_src bash
     #     rm foo bar baz
     touch foo bar baz
     ls -l foo bar baz
     chmod -v u+s foo   # setuid bit = octal 4000
     ls -l foo
     chmod -v g+s bar   # setgid bit = octal 2000
     ls -l bar
     chmod -v o+t baz   # sticky bit = octal 1000
     ls -l baz
   #+end_src

   #+RESULTS:
   : -rw-rw-r-- 1 marcus marcus 0 Apr 11 09:52 bar
   : -rw-rw-r-- 1 marcus marcus 0 Apr 11 09:52 baz
   : -rw-r--r-- 1 marcus cdrom  0 Apr 11 09:52 foo
   : mode of 'foo' changed from 0644 (rw-r--r--) to 4644 (rwSr--r--)
   : -rwSr--r-- 1 marcus cdrom 0 Apr 11 09:52 foo
   : mode of 'bar' changed from 0664 (rw-rw-r--) to 2664 (rw-rwSr--)
   : -rw-rwSr-- 1 marcus marcus 0 Apr 11 09:52 bar
   : mode of 'baz' changed from 0664 (rw-rw-r--) to 1664 (rw-rw-r-T)
   : -rw-rw-r-T 1 marcus marcus 0 Apr 11 09:52 baz

10) You want to make a shell script executable (to everyone) - what do you do?
    #+begin_quote
    - Use the command =chmod ugo+x=.
    #+end_quote
    #+begin_src bash
      #      rm qux
      > qux
      ls -l qux
      chmod a+x qux  # also possible: `ugo+x` or `775`
      ls -l qux
    #+end_src

    #+RESULTS:
    : -rw-rw-r-- 1 marcus marcus 0 Apr 11 09:53 qux
    : -rwxrwxr-x 1 marcus marcus 0 Apr 11 09:53 qux

Now, let's create a ~testuser~ account, establish a shared drive and
learn how to change passwords. This will conclude your Linux "permissions"
training.

** Create ~testuser~ account, a shared drive and change passwords

- Practice file: [[https://tinyurl.com/permissions-practice][tinyurl.com/permissions-practice]] (save as .org)

- Create ~testuser~ account (see [[https://tinyurl.com/permissions-org][tinyurl.com/permissions-org]])

- Create shared drive and set appropriate permissions

- Change passwords

* Week 13 - Changing passwords / Process management (sprint review)
#+attr_html: :width 500px:
[[../img/week_13.png]]

** Test 5 ("file permissions") is available until Sunday 21 April

- 25 questions (multiple choice, matching, and true/false)
- 1 hour to complete and submit
- Draft test created with the help of ChatGPT based on:
  1) "Review DataCamp lesson "From command-line to bash script"
  2) "Short review and practice exercises for permissions"
  3) Lecture script for permissions (6_permissions.org in GitHub)


** Bash programming exercise ([[https://lyon.instructure.com/courses/2255/assignments/26725][Canvas]])

Create a Bash script `file.sh` that performs the following tasks:

1. Takes a directory path as an argument.
2. Checks if the directory exists. If not, prints an error message and
   exits.
3. Lists all files in the directory with their details (name, size,
   and last modified date).
4. Counts the total number of files and directories in the specified
   directory and displays the count.
5. Develop the script in an Emacs Org-mode file that documents your
   development process. The final script should be in a code block
   that can be tangled to generate a source file `file.sh`, which
   could be run on the shell with the command `bash file.sh
   [directory-path]`.

Submit the Org-mode file.


** 2nd sprint review (update in class)
#+attr_html: :width 300px:
[[../img/2nd_sprint_review.png]]

- Please read the instructions carefully: you were supposed to submit
  an Org-mode file (easy for me to download and read in Emacs).

- If you are unhappy with your grade, please resubmit an improved
  literature review, and let me know that you uploaded it. Improvement
  means that you responded to my comments.

- Several of you did not meet the deadline!? Use the calendar, or let
  me know what you need from me to help you remember/pay attention.

- There were some great submissions - including primary data
  collection (Nate), hardware-heavy stuff by Kim and Donna (kudos: you
  can't get dirty hands with software, but only with hardware), drafts
  of complete papers by Timothy (verbose) and Nikola (succinct), and
  even some code (!) by Ryan. I especially like it when you challenge
  yourself, and when you reflect on the challenge.

- Many of you focused too much on the technical implementation, and
  not enough (or at all) on the meaning of this project. If you don't
  have a client, you need to invent one or be your own client, or find
  a potential client through publications. The reason: your time is
  valuable and costs money - and there are many competing projects.

- That is the meaning of "Requirements analysis" - it includes a
  scenario, or a use-case for your project result. Even if the
  project's result is itself to bring technology forward you need to
  justify spending resources.

- For anything Unix/Linux related, you have 30-60 years of rich
  history to contend with! The good news is that looking and finding
  command line application references is in itself a pleasure - and
  many tools and approaches are waiting to be rediscovered - like the
  one and only "Midnight Commander".
  #+attr_html: :width 600px:
  [[../img/midnight_commander.png]]

- Let's go around the room and check the project temperature!


** Finish shared drive creation and changing passwords

Short review: can you remember the process steps completed so far to
create a shared drive?
#+begin_quote
1. Create a new user (=adduser= - check ~/etc/passwd~)
2. Create a new group (=addgroup= - check: ~/etc/group~)
3. Add new user to new group (=usermod= - check ~/etc/group~)
4. Create new directory ( =sudo mkdir= - check: =ls -l=)
5. Change group ownership of new directory (=sudo chown :[group] [dir]=)
6. Change new directory group permissions (=sudo chmod 775=)
7. Set =setgid= (=sudo chmod g+s [dir]=)
8. Create new file and directory (=sudo umask=)
#+end_quote

*Onward:* open the practice file ([[https://tinyurl.com/permissions-practice][tinyurl.com/permissions-practice]])


** Review: Bash scripting - variables

1) What is the =$= operator?
   #+begin_quote
   =$= is the accessor for variable values
   #+end_quote

   #+begin_src R :session *R* :results output
     str(ToothGrowth)
     ToothGrowth$len[5]
   #+end_src

   #+RESULTS:
   : 'data.frame':	60 obs. of  3 variables:
   :  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...
   :  $ supp: Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...
   :  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...
   : [1] 6.4

   #+begin_src bash
     echo $USER $HOME $PWD  # environment variables

     var="hello"
     echo $var
   #+end_src

   #+RESULTS:
   : marcus /home/marcus /home/marcus/GitHub/os24/org
   : hello

2) Which =bash= data structures correspond to R and Python data structures?
   #+begin_quote
   - Arrays: One-dimensional arrays in Python: =np.array= or =list=, and
     vector =c()= in R. Arrays are ordered with indices.
   - Associative arrays: Dictionaries in Python (unordered), lists
     (ordered) in R.
   #+end_quote

   Python:
   #+begin_src python :python python3 :session *Python* :results output :exports both :comments both :tangle yes :noweb yes
      my_list = [1,2,3,4]
      print(my_list)

      import numpy as np
      arr = np.array([1,2,3,4])
      print(arr)
    #+end_src

    #+RESULTS:
    : [1, 2, 3, 4]
    : [1 2 3 4]

   R:    
   #+begin_src R :results output
      my_vector <- c(1,2,3,4)
      my_vector
   #+end_src

   #+RESULTS:
   : [1] 1 2 3 4

   Python:
   #+begin_src python :python python3 :session *Python* :results output :exports both :comments both :tangle yes :noweb yes
     my_dict = {'name':'New York', 'population':14000000}
     print(my_dict['name'])
   #+end_src

   #+RESULTS:
   : New York

   R:
   #+begin_src R :results output
     my_list = list('city'=c('New York'), 'population'=c(14000000))
     my_list[[1]]
   #+end_src

   #+RESULTS:
   : [1] "New York"

3) What does "shell within a shell" mean?
   #+begin_quote
   Also called /command expansion/ - preserved only between double quotation
   marks " " - either with $() or with backticks ``.
   #+end_quote
   Examples:
   #+begin_src bash
     now="The date is $(date)"
     echo $now

     now2="The date is `date`"
     echo $now2

     echo $((4+5)) # arithmetic expansion
     echo `(4+5)`  # error
   #+end_src

   #+RESULTS:
   : The date is Thu Apr 18 10:04:00 AM CDT 2024
   : The date is Thu Apr 18 10:04:00 AM CDT 2024
   : 9
   : 

4) How can you calculate the average of two numbers in =bash=?
   #+begin_src bash
     # `expr` only works with integers
     expr 4 + 5
     expr 5 / 2 # result 2.5 is truncated
   #+end_src

   #+RESULTS:
   : 9
   : 2

   #+begin_src bash
     echo "4.5 + 5.5" | bc
     echo "10 / 3" | bc
     echo "scale=2; 10 / 3" | bc

     var1=10
     var2=3
     echo "scale=2; $var1 / $var2" | bc
   #+end_src

   #+RESULTS:
   : 10.0
   : 3
   : 3.33
   : 3.33

5) How can you create, print, check and manipulate arrays in =bash=?
   #+begin_src bash
     array=(1 2 3 4)     
     echo ${array[@]}
     echo ${#array[@]}

     # echo ${array[2]}

     arr=(15 20 25 30 35 40 45 50 55 60)
     echo ${arr[@]:3:4}
     arr2=${arr[@]:3:2}
     echo ${arr2[@]}

     arr+=(10)
     echo ${arr[@]}

     # array2=(1,2,3,4)
     # echo ${array2[@]}
     # echo ${#array2[@]}
   #+end_src

   #+RESULTS:
   : 1 2 3 4
   : 4
   : 30 35 40 45
   : 30 35
   : 15 20 25 30 35 40 45 50 55 60 10
   
6) How can you create and check associative arrays in =bash=?
   #+begin_src bash
     declare -A city  # declares empty associative array

     city=( [name]="New York" [population]=14000000 )
     
     echo ${#city[@]}  # length
     echo ${city[@]}  # elements
     echo ${city['name']} # extract
  #+end_src

  #+RESULTS:
  : 2
  : 14000000 New York
  : New York

7) *Bonus challenge:* extract version number from the ~bash --version~
   command and tell the user if associative arrays are available or
   not. Involves =if= and pattern extraction with regular expressions.
   #+begin_src bash
     bash --version
   #+end_src

   #+RESULTS:
   : GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu)
   : Copyright (C) 2020 Free Software Foundation, Inc.
   : License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   : 
   : This is free software; you are free to change and redistribute it.
   : There is NO WARRANTY, to the extent permitted by law.

* Week 14 - Process management & +networking & environment variables+ (video)
#+attr_html: :width 500px:
[[../img/week_14.png]]

** Final presentations April 30, May 2 and May 7

- We have 15 projects and 15 slots of 15 minutes over 3 days.
 
- Let's fill the schedule up from the bottom.

- If you're not ready at all, go to the end of the line.

- Remember that you don't have to present a closed project and that
  you're graded on the strength of your efforts not your results.

- Must upload materials at least on the weekend before the week of
  your presentation (complete materials for grading by May 8).

  |------------+-------------+----------|
  | DAY        |        TIME | SPEAKER  |
  |------------+-------------+----------|
  | Tue Apr 30 |   9:30-9:45 | Nikola   |
  |            |  9:45-10:00 | Isaac    |
  |            | 10:00-10:15 | Boogie   |
  |            | 10:15-10:30 | Timothy  |
  |            | 10:30-10:45 | Keidrick |
  |------------+-------------+----------|
  | Thu May 2  |   9:30-9:45 | Lucia    |
  |            |  9:45-10:00 | Jakobe   |
  |            | 10:00-10:15 | Kim      |
  |            | 10:15-10:30 | Nate     |
  |            | 10:30-10:45 | Ryan     |
  |------------+-------------+----------|
  | Tue May 7  |   9:30-9:45 | Clifford |
  |            |  9:45-10:00 | Pedro    |
  |            | 10:00-10:15 | Fowler   |
  |            | 10:15-10:30 | Donna    |
  |            | 10:30-10:45 | Jacob    |
  |------------+-------------+----------|
  
** IN PROGRESS Process management (finish on your own)

** TODO Networking and the environment (video lecture)

** TODO Makefiles and compiling from source (video lecture)


* Week 15 - Final presentations
#+attr_html: :width 600px:
[[../img/week_15.png]]

** Take 5 minutes to fill in the course evaluation!
#+attr_html: :width 400px:
[[../img/evaluation.png]]

- Register your email to get bonus points!
- It's still anonymous but I will be told that you filled it in!
- Don't hold back - let me have it - I can (probably) take it!


** Final exam: Sunday 12 May 1pm-3pm (online)

- The final exam is optional
- You can improve your grade with it (but you cannot make it worse)
- Please let me know in advance if you intend to take it (by May 8)
- The exam will be online & open book like the tests
- All tests are repeateable before but will be closed before the exam.

* Week 16 - Final presentations
#+attr_html: :width 600px:
[[../img/week_16.png]]

** Closing recommendations for where to go from here:

1) Get a Linux certification ([[https://linuxfoundation.org][I got one here]])
2) Book lovers: read "[[https://nostarch.com/wcss2][Wicked Cool Shell Scripts]]" (NoStarch 2016)
3) Pick a CLI topic: cloud computing, network administration,
   container technology, or system programming, and practice!
4) Try different Linux distros and check out their differences
5) Subscribe (and read): [[https://opensource.com/][opensource.com]], [[https://www.linux.com/][linux.com]], [[https://itsfoss.com/][It's FOSS]] blogs.
6) Build a presence on GitHub - follow, fork and watch others.
7) ...
8) ...
9) ...
10) ...

My own path: I'll focus on C + Python + SQL as the winning combo.

* References

ARM (2010). Operating Systems Foundations with Linux on the Raspberry
Pi. By Professor Wim Vanderbauwhede and Dr. Jeremy Singer ISBN
978-1-911531-20-3. [[https://www.arm.com/resources/education/books/operating-systems][URL: arm.com]].
