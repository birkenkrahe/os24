#+TITLE: Notebook - Operating Systems
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 420, Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
* DONE Week 1 - Overview and introduction to OS
#+attr_html: :width 400px
[[../img/cover.png]]

- [X] Course overview - [[https://lyon.instructure.com/courses/2255/assignments/syllabus][syllabus]] and [[https://lyon.instructure.com/courses/2255/pages/course-links][course links]]
- [X] Textbook: The Linux Command Line (2e) - [[https://linuxcommand.org/tlcl.php][free PDF]]
- [X] Installation MSYS2 and CYGWIN on Windows ([[https://chat.google.com/room/AAAABlWSGes/8AnZfK60IZM/8AnZfK60IZM?cls=10][Google Chat]])

** Computer Chronicles - Operating Systems (1984)

- [[https://youtu.be/V5S8kFvXpo4?si=fPAMxylnvxkqHlfC][Source: YouTube]].
- My notes made while watching in class.
- [[https://chat.google.com/room/AAAABlWSGes/VzKc4SfKHUc/VzKc4SfKHUc?cls=10][Post in the OS Google Chat]].

* DONE Week 2 - Setting up Raspberry Pi & First contact 
#+ATTR_HTML: :WIDTH 400px:
[[../img/brainOS.png]]

/Alas: my brainOS has swapped memory of the 2022 class to a lost drive./

- [X] Lecture: OS fundamentals (Tuesday) - see also: [[https://colab.research.google.com/drive/1IPjLL83lvJ4PZvfhEQsmBUlbVUAvVdSh?usp=sharing][Ryan's Colab notes]]
- [X] Practice: Get started with Raspberry Pi: connect +and update+ (Thursday)
- [X] DataCamp review/Practice: Manipulating files and directories (Thursday)
- [X] Assignment: Discuss "A practical view of the Linux system" (Thursday)
- [ ] Discussion: Talk about projects with the Raspberry Pi (Tuesday)

** Announcement: UAMS College of Public Health student session

Monday, 29 January 12-12:45 PM via Zoom: http://tinyurl.com/UAMSCPUH
Passcode: 941969
#+ATTR_HTML: :WIDTH 400px:
[[../img/UAMS_student_session.png]]

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 400px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** DataCamp lesson review

Try the command examples in replit.com:
- Login to replit.com and create a bash REPL
- Run the following commands in ~main.sh~ (the bash file):
  #+begin_example sh
  mkdir /home/runner/org
  mkdir /home/runner/org/tmp
  touch /home/runner/org/sample.org
  touch /home/runner/org/.hidden
  touch a.out
  #+end_example

  1. What are the differences between the command line interface (CLI)
     and a graphical user interface (GUI)?
     #+begin_notes
     | CLI                     | GUI                | Commands         |
     |-------------------------+--------------------+------------------|
     | text and ASCII graphics | graphical and text | =cowsay=           |
     | keyboard only           | mouse and keyboard | =localectl status= |
     | flexible                | fixed              | =compgen -c -a=    |
     | established             | version-dependent  |                  |
     #+end_notes

  2. Which command sequence
     - checks your present working directory
     - changes to the ~org~ directory in your home directory
     - checks if you got there
     - lists all Org-mode files?
     #+begin_src sh  :results output
       pwd
       cd ~/org
       pwd
       ls *.org
     #+end_src

  3. Which command sequence
     - copies a file ~a.out~ from ~.~ into your ~org~ directory
     - moves the original file to the ~tmp~ directory in the root directory
     - check if the file is there
     - deletes the file in ~tmp~
     - checks if the file has actually been deleted?
     #+begin_example sh
       cp a.out ~/org
       mv a.out /tmp
       rm /tmp/a.out
       ls /tmp/a.out
     #+end_example

  4. Where does the absolute, and where does the relative path begin?
     #+begin_notes
     1) the absolute path begins at the root (beginning of file tree ~/~)
     2) the relative path begins at the current directory (~.~)
     #+end_notes

  5. How do you go home?
     #+begin_src sh :results output
       pwd
       cd ~  # alternative: `cd $HOME`
       pwd
     #+end_src

  6. What is the home directory of ~root~, the super-user?
     #+begin_notes
     The =$HOME= directory of ~root~ is ~/~
     #+end_notes

  7. Which command sequence  [on replit.com, to to ~~/org/tmp~ first]
     - removes a directory ~tmp~ two levels up from where you are
     - creates a directory ~tmp~ two levels up from where you are
     - lists all the files in that directory
     #+begin_src sh :results output
       rmdir ../../tmp  # directory must be empty
       pwd
       mkdir ../../tmp  # directory must not exist
       ls -a ../../tmp  # -a flag lists all files, even the hidden ones
     #+end_src

     #+RESULTS:
     : /c/Users/birkenkrahe/Documents/GitHub/os24/org
     : .
     : ..

  8. What's UTF-8?
     #+begin_notes
     The dominant character encoding for the World Wide Web capable of
     representing every character needed for writing in the majority
     of the world's languages.

     When you run an Emacs code block for the first time, Emacs will
     ask you which encoding you want to use and suggest UTF-8 to you.
     #+end_notes

** Reading assignment: A Practical View of the Linux System (2019)

- Read "A practical view of the Linux system" (ARM, 2019)
- [[https://www.arm.com/resources/education/books/operating-systems][Free textbook from ARM]] (British producer of the RPi's CPU).
- High level overview and nitty-gritty (C code).
- Read this as a preparation for lecture & discussion.
- Write down any questions you may have.

*** Review questions:
#+ATTR_HTML: :WIDTH 400px:
[[../img/os.png]]

1. Which topics are covered in the chapter?
   #+begin_notes
   - Basic Linux OS concepts: processes, file system, user administration
   - Booting Linux on the Pi: stages, initialization and login
   - Kernel admin/programming: kernel module, device drivers, tasks
   #+end_notes

2. What's a thread?
   #+begin_notes
   Threads are multiple concurrent tasks executing within a single
   process. Threads of a process share its resources (memory,
   priorities etc.).
   #+end_notes

3. What does "Everything is a file" really mean?
   #+begin_notes
   - A file to the user: contiguous data set.
   - A file to Linux: a place to read data from or write data to
   - Alternatives: "Everything is a stream of bytes/file descriptor."
   #+end_notes    

4. What is POSIX?
   #+begin_notes
   POSIX = Portable Operating System Interface standard - defines the
   API, command line shells and utilities to ensure cross-OS
   portability.
   #+end_notes

5. Bonus questions: what is the ~.elf~ format? What is a ~Makefile~? 
   #+begin_notes
   ELF = Executable and linkable standard format for executable files,
   object code, shared libraries, and core dumps in Unix-like systems.
   #+end_notes

*** Pretty useless summary (ChatGPT/AiPDF)
The document titled "[[https://github.com/birkenkrahe/os24/blob/main/pdf/The_Linux_System.pdf][The Linux System]]" provides a comprehensive view
of the Linux operating system, particularly focusing on its use with
the Raspberry Pi. The key points covered in the document include:

- *Linux System Overview*: It starts by introducing essential operating
  system concepts like processes, users, files, permissions, and
  credentials. It discusses the chain of events in booting Linux on
  the Raspberry Pi, creating Linux kernel modules, and building a
  custom Linux kernel. The chapter serves as a roadmap for the rest of
  the book, offering background knowledge rather than a how-to guide.

- *Operating System Hierarchy*: It details the Linux kernel's role and
  the interfacing between the kernel and user space applications. The
  document discusses processes, user space and kernel space, and the
  'everything is a file' concept in Linux.

- *Users and Permissions*: The system's multi-user nature, process
  creation, and user permissions are explored. It discusses the root
  user, the concept of credentials, and privileges in Linux.

- *Booting Linux on Arm-Based Systems*: The document provides an
  in-depth look at the boot process of Linux on the Raspberry Pi,
  covering each stage in detail. It explains the roles of various
  components like =bootcode.bin=, =start.elf=, =kernel.img=, and the
  =initramfs= in the boot process.

- *System Initialization* and *Login Process*: The role of the =systemd=
  process in system initialization, the process of user login via
  terminal or graphical interface, and the involvement of =getty= and
  login programs are outlined.

- *Kernel Administration* and *Programming*: It covers topics like
  loadable kernel modules, device drivers, and the anatomy of a Linux
  kernel module. The document also guides on building custom kernel
  modules and the complete kernel.

- *Administrator and Programmer View*: The document then shifts focus to
  how these concepts are relevant to system administrators and
  programmers, covering process management, scheduling, memory
  management, concurrency, parallelism, I/O, and persistent storage.

- *Exercises and Questions*: The chapter concludes with exercises and
  questions on installing Raspbian, setting up =ssh=, writing kernel
  modules, understanding the Linux boot process, and system
  administration tasks.

  This summary provides an overview of the topics covered in the
  document, offering insights into the practical aspects of Linux
  system administration and programming, particularly in relation to
  the Raspberry Pi. For more detailed information, you can refer to
  the document: [[[https://myaidrive.com/792tCDLz4VFrqZy2/The_Linux_Sy.pdf][The Linux System]]].

** Practice: first use of the shell on Raspberry Pi

- When you are on the X11 graphical desktop and you start the
  terminal, you're actually using a terminal emulator.

- Open the terminal outside of Emacs now, and try a few
  commands:
  1) find out who you are:
     #+begin_src sh
       whoami
     #+end_src
  2) find out where your computer is on the network:
     #+begin_src sh
       hostname -I
     #+end_src
  3) show the date and time:
     #+begin_src sh
       date
     #+end_src
  4) show available disk space in a format suitable for
     humans (only show the first five lines):
     #+begin_src sh
      df -H | head -n 5
     #+end_src
  5) show the amount of free memory:
     #+begin_src sh
       free
     #+end_src
  6) see all running process (refreshed every 5 seconds):
     #+begin_src sh
       top
     #+end_src

* DONE Week 3 - Shells & Using Emacs & Manipulating files
#+attr_html: :width 400px
[[../img/week3.png]]

/Image: OS fundamentals (penguins can't spell)./

Tuesday:
- [ ] *Lecture*: OS fundamentals (continued)
- [X] *Practice*: Update/upgrade PiOS / Emacs shells / LitProg

Thursday:
- [X] *Practice*: Manipulating files (~mkdir~, ~mv~, ~rm~, ~ln~) -
  [[http://tinyurl.com/2-manipulate-org][tinyurl.com/2-manipulate-files-org]]
- [ ] *Discussion*: Projects? Projects!
- [ ] *Review*: Manipulating data (~cat~ ~less~ ~head~ ~ls~ ~man~ ~cut~ ~grep~ ~paste~)

Next:  
- DataCamp: I relaxed the deadline for the next lesson (Feb 8).
- We're going to try and MASTER switching back and forth between Windows & Pi
- Remember to update your Pi:
  #+begin_example sh
  $ sudo apt update -y
  $ sudo apt full-upgrade
  #+end_example
- We might try and upgrade the OS on the Pi itself next week.
- I'll also give you a lecture on the Raspberry Pi.
  
** [Desperate] Lab setup
#+ATTR_HTML: :WIDTH 400px:
[[../img/labsetup.png]]

- Let's understand the KVM switch setup (Ryan/Jacob?).
- Make sure you return the workspace to a functional state.
- You can take your Pi home if you like between sessions.
- If you break it, you buy it ($100).
#+ATTR_HTML: :WIDTH 400px:
[[../img/kvm.png]]

** Unplugging the Pi (almost every session)

   1. Shut down the Pi with ~sudo shutdown now~ on the console
   2. Unplug the power mini-USB
   3. Unplug the other cables
   4. Press the button on the KVM switch to return to Windows
   5. Sign out of Windows if necessary

** Lecture: OS fundamentals

- [[file:1_fundamentals.org]] - Part 1: From kernel to timesharing.

** Practice: Update/upgrade PiOS / Emacs shells / LitProg

My pi@10.12.1.106

- Fire up your Pi.
- At the prompt, enter ~startx~ to start the X11 server.
- On the desktop, click on the raspberry logo and open ~Emacs (GUI)~.
- Download the ~.emacs~ configuration file:
  1) Open the Emacs browser with ~M-x eww~
  2) Enter the URL ~tinyurl.com/EmacsLyonPi~
  3) Write the file to ~~/.emacs~ with ~C-x C-w~
  4) Execute (~M-x eval-buffer~) to run configuration
  5) Now change your theme if you like (~M-x custom-themes~)
  6) Download the instructions from ~tinyurl.com/TermEmulator~
  7) Write the file to ~/1_fundamentals_practice.org~
  8) View your home directory with ~C-x d~ and enter ~s~ to see both files.
  9) Quit Emacs with ~C-x C-c~
  10) Fire Emacs back up again from the shell with ~emacs &~
  11) Work through the instructions.
  12) When finished, close down your computer with ~sudo shutdown now~

** DataCamp lesson review: manipulating files (practice)

Theme: Manipulating data on the command line (shell, terminal, CLI):
- [[http://tinyurl.com/2-manipulate-practice-org][Practice file]] and [[https://github.com/birkenkrahe/os24/blob/main/org/2_manipulate_practice_solution.org][solution file]]

** FYI - Installing Raspberry Pi OS for Pi400 ([[https://chat.google.com/room/AAAABlWSGes/DBIhqcpWdEU/DBIhqcpWdEU?cls=10][chat]])

Sources:
- [[https://www.raspberrypi.com/documentation/computers/getting-started.html][Getting started: detailed instructions]]
- [[https://www.raspberrypi.com/software/operating-systems/][Download area (RPi Imager - installer)]]
- [[https://www.raspberrypi.com/software/raspberry-pi-desktop/#:~:text=Debian%20with%20Raspberry%20Pi%20Desktop,PC%20or%20Apple%20Mac%20computer.][Raspberry Pi Desktop (for any old computer)]]
- [[https://youtu.be/eZ74x6dVYes?si=vLjK8nndJS2uS6bf][Raspberry Pi Explained in 100 seconds]]

What to do:
1. Get an SD card reader ([[https://www.amazon.com/UGREEN-Reader-Memory-Windows-Simultaneously/dp/B01EFPX9XA/ref=asc_df_B01EFPX9XA/?tag=hyprod-20&linkCode=df0&hvadid=309777534894&hvpos=&hvnetw=g&hvrand=14922228828382288851&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9025961&hvtargid=pla-438771094500&psc=1&mcid=3346d44aed8837e692060fcb6e3c7209&tag=&ref=&adgrpid=58425267301&hvpone=&hvptwo=&hvadid=309777534894&hvpos=&hvnetw=g&hvrand=14922228828382288851&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9025961&hvtargid=pla-438771094500&gclid=CjwKCAiAkp6tBhB5EiwANTCx1MXXejCwHTaI0GldFt8JUvq7DYoQPfNZgsoibyMvW6i26B62w9UBUhoC2twQAvD_BwE][I use this one]] - $12).
2. Get an SDHC card ([[https://www.amazon.com/Samsung-Class-Adapter-MB-MC32GA-AM/dp/B0749KG1JK/ref=sr_1_2?crid=MY5LUD60LHJI&keywords=samsung+32gb+sd+card+micro&qid=1705552023&sprefix=samsung+32gb+s%2Caps%2C112&sr=8-2][I use SanDisk Ultra Class 10 32GB]] - $12).
3. Mount SD card reader with microSD to your PC (Windows/MacOS = plugin).
4. Run RPi installer program on your PC.
5. Follow the instructions (pick Pi model/OS type/storage device).
6. Insert SD card in Rasperry Pi - boot and configure.

* DONE Week 4 - File system & Raspberry Pi
#+ATTR_HTML: :WIDTH 400px:
[[../img/pifigure.png]]

- [X] Review: Test 1 (average result 84.17% = B+)
  #+begin_src R :results output :session *R* :exports both :noweb yes
    mean(c(75.83,92.5,82.5,85,85,92.5,92.5,68.33,88.33,88.33,90,90,87.5,68.33,75.83))
  #+end_src

- [X] Projects discussion (sprint review: week 6 - 19 Feb)
- [X] OS fundamentals lecture & YouTube lectures
- [X] Upgrade Raspberry Pi OS

Next week:
- [ ] Finish "Manipulating files" [[http://tinyurl.com/2-manipulate-practice-org][Practice file]] (with [[https://github.com/birkenkrahe/os24/blob/main/org/2_manipulate_practice_solution.org][solution]]).
- [ ] Review and revisit "manipulating data" and "combining tools".

** Opportunity: working with a [social] entrepreneurship project
#+ATTR_HTML: :WIDTH 400px: 
[[../img/social.webp]]

If you're interested in making the world a better place not just in a
general, but in a specific way, starting right here in Batesville, and
earn extra credit, you can use your project in connection with the
"social entrepreneurship club" (SEC) - to reduce poverty, ignorance,
and even hunger. For Operating Systems, this will take a little more
thought than e.g. for databases.

One example might be the creation of a maker space for kids, or of a
series of realistic Raspberry Pi projects. To brainstorm ideas and see
what is already cooking, get together with Dr. Peter Staples and me,
and/or join the Google Space for SEC.

Dr. Staples will also offer a project management course this summer.


** Project challenge - (virtually) impossible


- 420 level course = independence and inspiration!
- This is a great opportunity for AI to shine!
- We'll only have 3 sprints, after 6, 11 and 15 weeks:
  1. Proposal in week 6.
  2. Results in week 11.
  3. Final presentation in week 16.

#+begin_quote
Prompt: "Give me 15 project ideas for a course on Operating Systems,
especially Linux. A project is completed by an individual student. The
project runs for 15 weeks. The student must produce a proposal
including methodology and references."
#+end_quote

[[https://chat.openai.com/share/c278de95-6b4a-4588-acb3-146689054b4d][Here's the answer.]] Including a sample breakdown of one project, and
the prerequisites:

1) Student with knowledge and experience
   - Computer Architecture
   - C programming (especially pointers, memory management)
   - Command line, bash programming, GCC, GNU make
2) Beginner
   - Set up a Linux environment (virtual machine) for experimentation
   - Write a simple kernel module
   - Compile the module
   - Learn to load and unload the kernel module
   - View kernel log for module output.

How such a kernel module could look like:
#+begin_example C
#include <linux/module.h>   // Needed for all modules
#include <linux/kernel.h>   // Needed for KERN_INFO

// Module Initialization function
static int __init simple_module_init(void) {
    printk(KERN_INFO "SimpleModule: Module loaded!\n");
    return 0; // Return 0 means module successfully loaded
}

// Module Cleanup function
static void __exit simple_module_exit(void) {
    printk(KERN_INFO "SimpleModule: Module unloaded!\n");
}

// Register module entry and exit points
module_init(simple_module_init);
module_exit(simple_module_exit);

// Module information
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("A Simple Linux Kernel Module");
MODULE_VERSION("0.1");
#+end_example

Simpler: bash- and shell-related projects.
** Project challenge - (totally) possible

Re-create a Raspberry Pi projects. The choice is yours!
- [[https://www.tomshardware.com/features/best-raspberry-pi-projects][Best Raspberry Pi projects January 2024]]
- [[https://pimylifeup.com/category/projects/][List of 160+ projects]]
- [[https://www.hackster.io/raspberry-pi/projects][4343 Raspberry Pi Projects]]

To do this, and to do stuff at home, you can take your Pi home if you
like and if you promise to look after it. If you destroy it, you'll
have to replace it - the Pi400 only costs $84 right now [[https://www.amazon.com/Raspberry-400-Computer-Kit-RPI400-US/dp/B08MYVQW1S/ref=sr_1_2?crid=7VCXPFUD7I0R&keywords=pi400&qid=1705606222&s=books&sprefix=pi400%2Cstripbooks%2C122&sr=1-2&ufe=app_do%3Aamzn1.fos.006c50ae-5d4c-4777-9bc0-4513d670b6bc][at
Amazon]]. (You might want to get your own anyway!)

You may have to purchase some equipment (I have a limited private
supply only). But it shouldn't break the bank especially since you
didn't have to buy a textbook (e.g. Intel NeuralStick 60$, LCD HAT
$20, )

Featured sample project for beginners:
- [[https://www.hackster.io/sridhar-rajagopal/international-space-station-tracker-6afdca][International Space Station tracker]] (2020) + Python

** Project challenge - conceptual projects

Any topic related to operating systems, even if we talked about it in
class: deepen it and make it interactive (for others) if you can. You
could take a chapter from any of the textbooks mentioned in the
syllabus, research and present it.

A project could also be the use of Linux in an area of your interest,
for example finance, video games, scientific supercomputing, particle
experiments, cosmology, or sports analytics.

You can also pick Windows or MacOS as a topic, and contrast it with
Linux. We've talked about this in class, but only anecdotally and
sporadically.

It would be good If you can link this project with the project in
another class you take with me this term - that way you can go deeper
and spend more time on one topic. Talk to me if you wish to do this.

** Upgrading Raspberry Pi OS
#+ATTR_HTML: :WIDTH 400px:
[[../img/retro_pi.png]]

Script: [[file:pi_install.org][Installing PiOS on Raspberry Pi 3-4]]


* Week 5 - Navigation

#+begin_src sh
  cat everyone.csv
  cut -f 2 -d , everyone.csv
  awk -F, '{print $2}' everyone.csv | tr -d '"'
 #+end_src

#+RESULTS:
: Name,Age
: "Johel,Ranjit",28
: "Sharma,Rupinder",26
: Age
: Ranjit"
: Rupinder"
: Age
: Ranjit
: Rupinder

** 10 review questions OS videos

1) Where's the "firmware" and what does it do?
   #+begin_notes
   - What: Manufacturer-specific software that provides low-level
     control for a device's specific hardware.
   - Where: embedded in the non-volatile ROM (Read-Only-Memory)
   #+end_notes
2) What's the short definition of an OS?
   #+begin_notes
   An OS is a resource allocator - for processing time (CPU) and
   memory (RAM).
   #+end_notes
3) Is the OS "fair"?
   #+begin_notes
   The OS strives to schedule processes to get equal share of the CPU
   but in the interest of system integrity, process and user priority,
   it must routinely play favorites.
   #+end_notes
4) Does the OS respond to every user request?
   #+begin_notes
   No. While the OS aims to manage resources efficiently and provide
   application program services, requests may be deined due to:
   - insufficient permissions
   - resource limitations
   - system policies
   - system request errors
   #+end_notes
5) How is a device controlled by the OS?
   #+begin_notes
   1. Device driver loads registers in the device controller.
   2. Device controller decides which action to take, like 'read
      character' from keyboard.
   3. Controller transfers data from device to its local buffer.
   4. When transfer is complete, device driver is informed via an
      *interrupt* signal from the controller.
   #+end_notes
6) What are "system interrupts"?
   #+begin_notes
   An interrupt is a signal to the CPU from hardware or software
   indicating an event that needs the CPUs immediate attention. All
   current operations are halted, the current state is saved, and
   execution is transferred to the interrupt handler to address the
   event. An example: printer job is finished.
   #+end_notes 
7) Which program runs at all times (while the computer is on)?
   #+begin_notes
   The OS kernel, or the managing brain of the CPU operation.
   #+end_notes
8) Which daemon runs at all times (while the computer is on)?
   #+begin_notes
   The system daemon program or =systemd=.
   #+end_notes
9) What is "multiprogramming"?
   #+begin_notes
   Aka "Batch system" operation mode:
   - Jobs (code + data) are organized to keep the CPU always busy.
   - One job is selected and run via job scheduling.
   - Jobs may have to wait (e.g. for I/O) and the OS switches to another.
   #+end_notes
10) What is "timesharing"?
    #+begin_notes
    Aka "multitasking":
    - CPU switches jobs so fast that users get the illusion of
      interactive computing
    - Timesharing gives rise to the different OS management tasks:
      1. Memory management (e.g. assign and use local variables)
      2. Process management (e.g. using the CPU)
      3. Scheduling management (e.g. switching processes)
      4. Device management (e.g. find and use printer)
      5. File management (e.g. find and use files)
    #+end_notes


** Lecture: OS fundamentals

- [[file:1_fundamentals.org]] - From the OS kernel to timesharing.
- OS videos (Mitch Davis based on Silberschatz et al. 10e):
  1. [[https://www.youtube.com/watch?v=zJTqTs7Ujr8&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq&index=1&t=20s&pp=iAQB][Introducing the OS (10 min)]]
  2. [[https://www.youtube.com/watch?v=Ku1gdK7ybAk&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq&index=2&t=536s&pp=iAQB][OS terminology (17 min)]]
  3. [[https://www.youtube.com/watch?v=09pJYDQ92FQ&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq&index=3&t=222s&pp=iAQB][Multitasking Kernel App modes (13 min)]]
  



* Week 6 - Exploring the system / Sprint review: proposal
* Week 7 - Manipulating files and directories
* Week 8 - Working with commands
* Week 9 - Redirection
* Week 10 - Permissions
* Week 11 - Processes / Package management / Sprint review: results
* Week 12 - Storage media / Networking
* Week 13 - Searching for files / Archiving and backup
* Week 14 - Regular expressions / Text processing
* Week 15 - Linux vs. Windows
* Week 16 - Summary and outlook / Final sprint review: presentation
* References

ARM (2010). Operating Systems Foundations with Linux on the Raspberry
Pi. By Professor Wim Vanderbauwhede and Dr. Jeremy Singer ISBN
978-1-911531-20-3. [[https://www.arm.com/resources/education/books/operating-systems][URL: arm.com]].
