#+TITLE:Permissions Practice - Shared directory and change password
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:permissions practice for CSC420 Operating Systems Spring 2024 Lyon College
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil author:nil date:nil
#+PROPERTY: header-args:bash :results output :exports both :noweb yes
#+PROPERTY: header-args:python :python python3 :session *Python* :results output :exports both :comments both :tangle yes :noweb yes
* README

- Permissions practice with two exercises on creating a shared
  directory and changing your password.

- This section is based on chapter 9 of Shotts, The Linux Command Line
  (2e), NoStarch Press (2019), pp. 95-98.

- Code tested with Linux Mint 21.3 Virginia and the Cinnamon 6.0.4
  Desktop running on a 2018 Dell Vostro 3470 (six i7-8700 cores).

* TODO Setting up a shared directory

Let's say both users on this Linux box have music collections and want
to set up a shared directory where they will store their files. One of
them has superuser privileges as =sudo=, the other (~testuser~) does not.

Split your screen now (~C-x 2~). In one buffer, open a shell (~M-x
shell~), in the other buffer, keep this file open. When there's an
~example~ block, change to the shell.

The steps to take are:
1) Create a new group
2) Add users to new group
3) Create a directory (shared by group members)
4) Change group ownership of shared directory
5) Change group permissions of shared directory

** As =sudo=, create a group called ~music~ using =groupadd=

Create a new group:
#+begin_example sh
     sudo addgroup music
     # output: Adding group `music' (GID 1002) ...
   #+end_example
You can also do this in the GUI (search for ~Users and groups~). The
default configuration file (bash script) for =adduser= and =addgroup=
is ~/etc/adduser.conf~ - you can look at it.

If you messed up, you can delete a group with =groupdel=.

Using =grep=, check the new entry in ~/etc/group~
#+begin_src bash
  cat /etc/group/ | grep music
#+end_src

#+RESULTS:
: music:x:1002:

** As =sudo=, add other user ~testuser~ to the group ~music~ using =usermod=

The =usermod= command is used to modify a user account:
1. the option =-a= appends user to a group
2. the option =-G= indicates that the following group is modified
#+begin_example bash
  sudo usermod -aG music testuser
#+end_example

Check success by searching for ~music~ in ~/etc/group~:
#+begin_src bash
  cat /etc/group | grep music
#+end_src

#+RESULTS:
: music:x:1002:testuser

** As =sudo=, create a directory ~Music~ for the music files
#+begin_example bash
  sudo mkdir -v /usr/local/share/Music
# output: mkdir: created directory '/usr/local/share/Music'
#+end_example

Superuser privileges are required to manipulate files outside of
your =$HOME= directory. Check the new directory:
#+begin_src bash
  ls -ld /usr/local/share/Music # permission mode 755
#+end_src

#+RESULTS:
: drwxr-xr-x 2 root root 4096 Apr 11 10:30 /usr/local/share/Music

** Change ~Music~ group ownership with =chown=

To make ~Music~ shareable, the group ownership needs to be changed to
the shared ~music~ group using =chown=:
#+begin_example bash
  sudo chown -v :music /usr/local/share/Music
# changed ownership of '/usr/local/share/Music' from root:root to :music
#+end_example

Check the new ownership:
#+begin_src bash
  ls -ld /usr/local/share/Music
#+end_src

#+RESULTS:
: drwxr-xr-x 2 root music 4096 Apr 11 10:30 /usr/local/share/Music

** Change ~Music~ group permissions with =chmod=

To make ~Music~ writeable by members of the ~music~ group, permissions
need to be changed from ~755~ to ~775~ using =chmod=:
#+begin_example bash
  sudo chmod -v 775 /usr/local/share/Music
# mode of '/usr/local/share/Music' changed from 0755 (rwxr-xr-x) to 0775 (rwxrwxr-x)
#+end_example

Check the new permissions:
#+begin_src bash
  ls -ld /usr/local/share/Music
#+end_src

#+RESULTS:
: drwxrwxr-x 2 root music 4096 Apr  3 21:36 /usr/local/share/Music

All users who share membership of the group ~music~ can now write to
this directory:
#+begin_example bash
  su - testuser  # login as `testuser`
#+end_example

#+begin_example bash
  id  # show uid, gid and groups
  > /usr/local/share/Music/file1
  ls -l /usr/local/share/Music/file1
# -rw-rw-r-- 1 testuser testuser 0 Apr  3 22:17 /usr/local/share/Music/file1
#+end_example

We are left with a few problems, which you can see in the last result:
#+begin_quote
1. All files created by a member will be set to the user's group
   rather than ~music~.
2. All files and directories created in ~Music~ will have the normal
   permissions of users like ~testuser~.
3. The default =umask= is ~0022~: the permission to write (~-w-~) is
   removed: group members cannot write (delete, rename) files (or
   manipulate directories) created by other members of the group.
#+end_quote

** Fixing the remaining issues

Remember that the =setgid= bit on a directory, all new files have the
directory's group ownership instead of the file owner's group:
#+begin_src bash
  ls -l /usr/local/share/ | grep Music # group is `music`
#+end_src

#+RESULTS:
: drwxrwxr-x 2 root music 4096 Apr 11 10:40 Music

Set the =setgid= with =chmod= to ~2775~:
#+begin_example bash
  sudo chmod -v g+s /usr/local/share/Music
# mode of '/usr/local/share/Music' changed from 0775 (rwxrwxr-x) to 2775 (rwxrwsr-x)
#+end_example

Check the result - the group permissions show the =setgid= bit now:
#+begin_src bash
  ls -l /usr/local/share/ | grep Music
#+end_src

#+RESULTS:
: drwxrwsr-x 2 root music 4096 Apr  3 22:17 Music

Now as ~testuser~, we set =umask= to ~0002~, remove the previous testfile
and create a new test file and test directory:
#+begin_example bash
  umask 0002
  > /usr/local/share/Music/test_file
  mkdir -v /usr/local/share/Music/test_dir
  ls -l /usr/local/share/Music
#+end_example

The result should look like this:
#+begin_example
  testuser@marcus-Vostro-3470:~$ ls -l /usr/local/share/Music
  total 4
  drwxrwsr-x 2 testuser music 4096 Apr  3 22:51 test_dir
  -rw-rw-r-- 1 testuser music    0 Apr  3 22:51 test_file
#+end_example

The only remaining issue: the =umask= value is only permanent for the
current shell session. To make it so for every session, you need to
modify the shell startup configuration file ~~/.bashrc~ (we'll do that
later).

* TODO Changing your password

- To set or change a password, use the =passwd= command:
  #+begin_example
    passwd [user]
  #+end_example

- You will be prompted for your old and for your new password. Try
  this now in the shell for the ~testuser~ account.

- Login as ~testuser~ with ~su - testuser~, and then change the password
  from ~testpassword~ to ~testuser~:
  #+attr_html: :width 400px:
  [[../img/passwd.png]]
  
- The =passwd= command enforces strong passwords: it will refused
  passwords that are too short, too similar to previous passwords,
  that are dictionary words, or are too easily guessed.

- Try (as ~testuser~) to change your password to ~1234~ (this should fail):
  #+begin_example bash
    You must choose a longer password.
  #+end_example

- To get password status information, enter ~passwd --status~. The output has
  7 fields:
  1. user's login name
  2. password locked (L), no password (NP) or usable (P)
  3. date of last password change
  4. minimum age of password (days)
  5. maximum age of password (days)
  6. warning period (days) after password has expired
  7. inactivity period when account will be disabled (-1 means never)
  #+begin_example bash
    testuser ~$ passwd -S
    testuser P 04/04/2024 0 99999 7 -1
  #+end_example

- As superuser you can set a password for another user. As =sudo=, try
  setting the password for ~testuser~ to ~1234~. This should work!
