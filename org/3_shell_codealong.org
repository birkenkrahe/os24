#+TITLE:Working with commands & the filesystem
#+AUTHOR: [yourname]
#+SUBTITLE:OS Practice CSC 420 Spring 2024
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both :results output
* README

- You can code along with the file ~tinyurl.com/3-shell-codealong.org~

  You can save it to an Org-mode file ~3-shell.org~

- Upload the finished codealong file [[https://lyon.instructure.com/courses/2255/assignments/25142][to Canvas]]

- You can get the Emacs configuration file for Pi OS from
  ~tinyurl.com/EmacsLyonPi~

- The solutions and results herein were all obtained on a Lenovo
  laptop running Linux Mint 21.3 with 4 Intel Core i3-6006U CPUs.

- This lab is based on chapter 5 (pp. 39-48) of Shotts (2019).

- You can get the completed file from ~tinyurl.com/3-shell-org~

* Command summary

| COMMAND | MEANING                       | EXAMPLE             |
|---------+-------------------------------+---------------------|
| type    | how a cmd name is interpreted | type ls             |
| which   | which cmd is executed         | which ls            |
| help    | help for shell built-ins      | help cd             |
| man     | full manual page              | man ls              |
| apropos | searches matching manuals     | apropos --exact apt |
| info    | info entry (hyperlinked)      | info ls             |
| whatis  | one-line manual extract       | whatis ls           |
| alias   | create command alias          | alias ll='ls -alF'  |

* The linux file system ("everything is a file")

Open a terminal (or a shell in Emacs) and look at the whole file
system in long format, with flags:
#+name: file_system
#+begin_src bash

#+end_src

This is what you see (more or less, with symbolic links strewn in):

| DIRECTORY      | CONTENT                                               |
|----------------+-------------------------------------------------------|
| ~/~              | Root directory where everything begins                |
| ~/bin~           | Executable binaries for the OS to boot and run        |
| ~/boot~          | Linux kernel, initial RAM disk image to boot          |
| ~/dev~           | List for kernel with all known devices                |
| ~/etc~           | System configuration files (e.g. ~/etc/passwd~)         |
| ~/home~          | Directory for user directories (e.g. ~/home/pi~)        |
| ~/lib~           | Shared library files (like Windows DLLs)              |
| ~/lost+found~    | Panic room for each formatted disk partition          |
| ~/media~         | Mount points for removable media (e.g. USB stick)     |
| ~/mnt~           | Mount points for manually mounted removable media     |
| ~/opt~           | Optional commercial software (e.g. browser)           |
| ~/proc~          | Virtual FS for the kernel (e.g. ~/proc/cpuinfo~)        |
| ~/root~          | ~$HOME~ directory of the ~root~ super-user                |
| ~/sbin~          | System binaries for system tasks (~sudo shutdown~)      |
| ~/tmp~           | Holding bay for temp files, emptied at reboot         |
| ~/usr~           | Programs and support files for regular users          |
| ~/usr/bin~       | Executable programs of the distro (e.g. ~cat~)          |
| ~/usr/lib~       | Shared libraries for ~/usr/bin~ programs                |
| ~/usr/local~     | Programs not included in your distro                  |
| ~/usr/sbin~      | More system administration programs                   |
| ~/usr/share~     | Shared data for  ~/usr/bin~ programs (e.g. sound files) |
| ~/usr/share/doc~ | Man pages and other package documentation             |
| ~/var~           | Databases, spool files, user mail (volatile files)    |
| ~/var/log~       | Records of system activity (e.g. ~/var/log/syslog~)   |

* What is a command?

There are four types of commands: binaries/executables, built-ins,
shell functions, and aliases.

1. An *executable* program e.g. in ~/usr/bin~ - could be compiled from
   source (e.g. from C), or scripted (e.g. from bash)

2. A *builtin*, a command built into the shell itself, like ~cd~:
   #+begin_src bash

   #+end_src

3. A *shell function*, scripts incorporated into the environment like
   ~~/.bashrc~, which is a configuration file.

4. An =alias=, commands that we can define from other commands.

* Identify commands with =type= and =which=

- =type= is a built-in (check that?), which displays the kind of command
  executed by the shell. Try it on ~ls~ and ~type~, and then try ~type -a grep~:
  #+begin_src bash

  #+end_src

- If you try ~type -a grep~ in a real terminal (not in Emacs), you get
  an additional answer, ~grep is aliased to `grep --color=auto`~.

- To find out =which= of perhaps many different commands with the same
  name is executed, use ~which~.
  #+begin_src bash

  #+end_src

- ~which~ only works for executable programs (not aliases, not
  builtins). Try it on a builtin command:
  #+begin_src bash :results silent

  #+end_src

* From a time before Google: getting help with =help=

- ~bash~ has a built-in help facility for each of the shell
  builtins. Try it for ~cd~:
  #+begin_src bash

  #+end_src

- In all documentation, ~[ ]~ indicates optional items, like here:
  #+begin_example bash
  cd [-L|[-P [-e]] [-@]] [dir]
  #+end_example

- Meaning: ~cd~ can be followed by either ~-L~ or ~-P~, and if ~-P~ is
  specified, then the ~-e~ option can be included followed by ~dir~ with
  the default ~$HOME~.

- Show that ~cd~ can be run without option or argument, and that this
  use of ~cd~ defaults to going ~$HOME~.
  #+begin_src bash

  #+end_src

- Many executable programs support the ~--help~ optoin that gives an
  overview of syntax and options: try this option for ~type~.
  #+begin_src bash

  #+end_src

- Try the option ~--help~ for ~help~.
  #+begin_src bash

  #+end_src

* Getting help from the =man= page & your =fortune=

- Executable programs that can be run on the command line have a
  manual or man page. The ~man~ program is used to view them. Try it on
  ~ls~ first using a code block, and then display it in a separate
  buffer with ~M-x man RET ls~.
  #+begin_src bash

  #+end_src

- Try ~man~ on a shell builtin, e.g. ~help~:
  #+begin_src bash :results silent

  #+end_src

- The format of a manual page is
  1) title (page name including the command section)
  2) synopsis of the syntax
  3) description of the purpos
  4) listing and description of each of the options

- Man pages are not vignettes like you might know them from R or from
  the Python standard library, with examples. They are not tutorials
  but only reference pages.

- ~man~ uses ~less~ to display its information.

- The Unix manual is broken into sections:
  1) run these in a terminal or inside Emacs. When you address a
     section, you can prefix the number, e.g. ~man 3 printf~.
  2) find out ~which~ command is executed when you run it.

  | Section | Contents                         | Example      |
  |---------+----------------------------------+--------------|
  |       1 | User commands (~/usr/~)            | bash(1)      |
  |       2 | Interface to kernel system calls | write(2)     |
  |       3 | Interface to C library           | printf(3)    |
  |       4 | Special device files (~/dev~)      | /dev/null    |
  |       5 | File formats                     | /etc/passwd  |
  |       6 | Games                            | fortune      |
  |       7 | Miscellaneous                    | inode(7)     |
  |       8 | System admin commands/daemons    | cron(8)      |

- Where are these commands located?
  #+begin_src bash

  #+end_src

- Some functions have the same name but are different
  programs. E.g. there is a user-command ~printf(1)~ to print stuff
  from the terminal:
  #+begin_src bash

  #+end_src

  And there's ~printf(3)~ which refers to the standard library
  function in ~stdio.h~ that you use in C programs:
  #+begin_src C :main yes :includes <stdio.h> :results output :exports both :noweb yes

  #+end_src

- Let's play the ~fortune~ game:
  #+begin_src bash

  #+end_src

- Hey, the command and its man page are not found. Open a fully
  functional terminal and run these commands:
  #+begin_example bash
  $ sudo apt install fortune -y
  $ fortune
  $ man fortune
  $ which fortune
  #+end_example

- Can you generate a "potentially offensive" fortune cookie?
  #+begin_src bash

  #+end_src

- The shell, ~bash(1)~ has one of the longest man pages (80). It's
  essentially a booklet. ~GCC(1)~ the C compiler beats this, it's a
  book. Don't print these out.

* Display appropriate commands with =apropos=

- =apropos= is a search function that exists in many programs -
  e.g. Emacs has such a help (try ~C-h a man~), and R does, too: in a
  terminal outside of Emacs, enter R, and on the console, enter:
  #+begin_example R
  R> ??Nile
  R> ?datasets::Nile
  #+end_example

- For a shell example, try ~apropos~ on ~fortune~, ~inode~ and ~cron~:
  #+begin_src bash

  #+end_src

- The ~man~ function with the ~-k~ flag performs the same job as ~apropos~:
  #+begin_src bash

  #+end_src

* =whatis= in a command?

- ~whatis~ displays the name and a one-line description of a man page:
  #+begin_src bash

  #+end_src

* Display a commands =info= entry

- Info is a GNU project. You can use it as a standalone manual or use
  it for example inside Emacs: try ~C-h i~ and you're in it.

- Info files are created from ~.texi~ TeXinfo files using the TeX
  typesetting system created by Donald Knuth (who also invented
  literate programming), generated with ~texinfo~.

- Info pages are hyperlinked - this is in fact where Tim Berners-Lee
  (and Steve Jobs) very likely got the idea from. The creator of
  Emacs, Richard Stallman created the info system in the early 1980s.

- The ~info~ program reads info files, which are tree structured into
  nodes. Each node contains a single topic. Much like many Emacs
  modes, ~info~ navigation works with single letter commands like
  p,n,U,?.

- Print only the first 13 lines of the ~info~ for =head=:
  #+begin_src bash

  #+end_src

- Find the info for =head= inside the Emacs Info reader.

- Most of the mentioned command line help programs are part of the
  GNU coreutils suite of programs: enter ~info coreutils~ in the
  terminal to see the info, and exit with `q`.

* You must =README=

- You probably noticed the `README` headline that all my scripts start
  with: this is a Unix and developer tradition.

- Software distributions usually contain a README file that lists the
  main changes and the history of changes as well as anything that you
  need to know before starting to use the software.

- On GitHub, when you create a repo of your own, GitHub will create a
  README file for you.

* Creating your own commands with =alias=

- Check out ~~/.bashrc~ (if you have it, which you should) and search
  (~C-s~) for ~alias~.

- Use one of these aliases: open a terminal or a shell in Emacs (~M-x
  shell~) and enter ~ll~, which is aliased for ~ls -alF~ (remember what
  this means? How can you find out?)

- You can put more than one command on one line separated by ~;~
  #+begin_src bash

  #+end_src

- On *one line*, change to ~/usr~, list all files, and go back to ~$HOME~
  again, then make sure you're ~$HOME~.

  #+begin_src bash

  #+end_src

- We want to create a new command using ~alias~ called ~test~. First, find
  out if ~test~ already exists:
  #+begin_src bash

  #+end_src

- It does! Let's try ~foo~ (see [[https://en.wikipedia.org/wiki/Foobar][foobar]]) in the format ~alias='string'~ -
  you have to do this in a fully functional shell.
  #+begin_example bash
    $ alias foo='cd /usr;ls;cd ~;pwd' # defines the new command
    $ foo # runs the command sequence
    $ alias # shows all aliases
    $ type foo # displays the character of the command
  #+end_example

- To remove the alias, use ~unalias~ on the name:
  #+begin_example
  $ unalias foo
  $ type foo
  #+end_example

- Why can we not do this in Emacs?
  #+begin_quote
  Because aliases are temporary and vanish when the session ends, and
  because the Emacs terminal is only a simulatin (~M-x term~ would work
  though but it's hard to get rid of - try it: you have to ~exit~ to
  kill it.)
  #+end_quote

* References

Shotts W (2019). The Linux Command Line (2e), NoStarch Press.

* Footnotes

[fn:1]
